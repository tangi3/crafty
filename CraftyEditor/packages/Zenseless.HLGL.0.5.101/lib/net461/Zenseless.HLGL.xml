<?xml version="1.0"?>
<doc>
    <assembly>
        <name>Zenseless.HLGL</name>
    </assembly>
    <members>
        <member name="T:Zenseless.HLGL.CachedContentManagerDecorator">
            <summary>
            
            </summary>
        </member>
        <member name="M:Zenseless.HLGL.CachedContentManagerDecorator.#ctor(Zenseless.HLGL.IContentManager)">
            <summary>
            Initializes a new instance of the <see cref="T:Zenseless.HLGL.CachedContentManagerDecorator"/> class.
            </summary>
            <param name="contentManager">The content manager.</param>
        </member>
        <member name="P:Zenseless.HLGL.CachedContentManagerDecorator.ContentManager">
            <summary>
            Gets the decorated content manager.
            </summary>
            <value>
            The content manager.
            </value>
        </member>
        <member name="E:Zenseless.HLGL.CachedContentManagerDecorator.NewCacheEntry">
            <summary>
            Occurs after a new cache entry was created.
            </summary>
        </member>
        <member name="P:Zenseless.HLGL.CachedContentManagerDecorator.ImporterTypes">
            <summary>
            Gets a list of registered importer types.
            </summary>
            <value>
            The importer types.
            </value>
        </member>
        <member name="P:Zenseless.HLGL.CachedContentManagerDecorator.Names">
            <summary>
            Enumerates all content resource names.
            </summary>
            <value>
            All content resource names.
            </value>
        </member>
        <member name="M:Zenseless.HLGL.CachedContentManagerDecorator.DisposeInstances">
            <summary>
            Disposes all loaded content instances.
            </summary>
        </member>
        <member name="M:Zenseless.HLGL.CachedContentManagerDecorator.Load``1(System.Collections.Generic.IEnumerable{System.String})">
            <summary>
            Creates an instance of a given type from the resources with the specified names.
            </summary>
            <typeparam name="TYPE">The type to create.</typeparam>
            <param name="names">A list of resource names.</param>
            <returns>
            An instance of the given type.
            </returns>
        </member>
        <member name="M:Zenseless.HLGL.CachedContentManagerDecorator.RegisterImporter``1(System.Func{System.Collections.Generic.IEnumerable{Zenseless.HLGL.NamedStream},``0})">
            <summary>
            Registers an importer.
            </summary>
            <typeparam name="TYPE">The return type of the importer.</typeparam>
            <param name="importer">The importer instance.</param>
        </member>
        <member name="T:Zenseless.HLGL.NamedFileStreamLoader">
            <summary>
            Handles named file streams
            </summary>
            <seealso cref="T:Zenseless.HLGL.INamedStreamLoader" />
        </member>
        <member name="P:Zenseless.HLGL.NamedFileStreamLoader.Names">
            <summary>
            If a finite set of stream names are known these are enumerated (like for a resource assembly), otherwise (like for a file system) an empty set is returned.
            </summary>
            <value>
            List of names or null;
            </value>
        </member>
        <member name="M:Zenseless.HLGL.NamedFileStreamLoader.Open(System.String)">
            <summary>
            Opens a file stream with the given file path.
            </summary>
            <param name="name">The file path of the stream.</param>
            <returns>
            A <seealso cref="T:Zenseless.HLGL.NamedStream" />.
            </returns>
        </member>
        <member name="M:Zenseless.HLGL.NamedFileStreamLoader.Exists(System.String)">
            <summary>
            Check if the specified name exists.
            </summary>
            <param name="name">The name.</param>
            <returns></returns>
        </member>
        <member name="T:Zenseless.HLGL.NamedResourceStreamLoader">
            <summary>
            
            </summary>
            <seealso cref="T:Zenseless.HLGL.INamedStreamLoader" />
        </member>
        <member name="M:Zenseless.HLGL.NamedResourceStreamLoader.#ctor(System.Reflection.Assembly)">
            <summary>
            Initializes a new instance of the <see cref="T:Zenseless.HLGL.NamedResourceStreamLoader"/> class.
            </summary>
            <param name="resourceAssembly">The resource assembly.</param>
        </member>
        <member name="P:Zenseless.HLGL.NamedResourceStreamLoader.ResourceAssembly">
            <summary>
            Gets the resource assembly.
            </summary>
            <value>
            The resource assembly.
            </value>
        </member>
        <member name="P:Zenseless.HLGL.NamedResourceStreamLoader.Names">
            <summary>
            Gets the resource names.
            </summary>
            <value>
            The resource names.
            </value>
        </member>
        <member name="M:Zenseless.HLGL.NamedResourceStreamLoader.Open(System.String)">
            <summary>
            Opens a stream with the given name.
            </summary>
            <param name="name">The name of the stream.</param>
            <returns>
            A <seealso cref="T:Zenseless.HLGL.NamedStream" />.
            </returns>
            <exception cref="T:System.NotImplementedException"></exception>
        </member>
        <member name="M:Zenseless.HLGL.NamedResourceStreamLoader.Exists(System.String)">
            <summary>
            Check if the specified resource exists.
            </summary>
            <param name="name">The name.</param>
            <returns></returns>
        </member>
        <member name="T:Zenseless.HLGL.NamedShaderException">
            <summary>
            Is thrown when the shader content importer threw a <seealso cref="T:Zenseless.HLGL.ShaderException"/> (contained in inner exception)
            </summary>
            <seealso cref="T:System.Exception" />
        </member>
        <member name="M:Zenseless.HLGL.NamedShaderException.#ctor(System.String,Zenseless.HLGL.ShaderException)">
            <summary>
            Initializes a new instance of the <see cref="T:Zenseless.HLGL.NamedShaderException"/> class.
            </summary>
            <param name="name">The name.</param>
            <param name="innerException">The inner exception.</param>
        </member>
        <member name="P:Zenseless.HLGL.NamedShaderException.Name">
            <summary>
            Gets the name.
            </summary>
            <value>
            The name.
            </value>
        </member>
        <member name="P:Zenseless.HLGL.NamedShaderException.InnerException">
            <summary>
            Gets the <see cref="T:Zenseless.HLGL.ShaderException" /> instance that caused the current exception.
            </summary>
        </member>
        <member name="T:Zenseless.HLGL.ContentImporters">
            <summary>
            Some often used content importers
            </summary>
        </member>
        <member name="M:Zenseless.HLGL.ContentImporters.StringBuilder(System.Collections.Generic.IEnumerable{Zenseless.HLGL.NamedStream})">
            <summary>
            Creates a string out of a list of streams.
            </summary>
            <param name="resources">The import resources.</param>
            <returns>A string.</returns>
        </member>
        <member name="M:Zenseless.HLGL.ContentImporters.Update(System.Text.StringBuilder,System.Collections.Generic.IEnumerable{Zenseless.HLGL.NamedStream})">
            <summary>
            Updates the specified output.
            </summary>
            <param name="output">The output.</param>
            <param name="resources">The resources.</param>
        </member>
        <member name="M:Zenseless.HLGL.ContentImporters.ByteBuffer(System.Collections.Generic.IEnumerable{Zenseless.HLGL.NamedStream})">
            <summary>
            Creates a byte array out of a list of streams.
            </summary>
            <param name="resources">The import resources.</param>
            <returns>A byte array.</returns>
            <exception cref="T:System.ArgumentException">No elements</exception>
        </member>
        <member name="M:Zenseless.HLGL.ContentImporters.DefaultMesh(System.Collections.Generic.IEnumerable{Zenseless.HLGL.NamedStream})">
            <summary>
            Meshes the specified resources.
            </summary>
            <param name="resources">The resources.</param>
            <returns></returns>
            <exception cref="T:System.ArgumentException">No elements</exception>
        </member>
        <member name="T:Zenseless.HLGL.ContentLoaderExtensions">
            <summary>
            Extension methods for content loader classes
            </summary>
        </member>
        <member name="M:Zenseless.HLGL.ContentLoaderExtensions.GetFullName(System.Collections.Generic.IEnumerable{System.String},System.String)">
            <summary>
            Gets the full name for a given shortName.
            </summary>
            <param name="fullNames">The reference list of full names</param>
            <param name="shortName">The short name.</param>
            <returns>The full name.</returns>
        </member>
        <member name="M:Zenseless.HLGL.ContentLoaderExtensions.GetFullNames(System.Collections.Generic.IEnumerable{System.String},System.Collections.Generic.IEnumerable{System.String})">
            <summary>
            Gets the full names for a list of given shortNames.
            </summary>
            <param name="fullNames">The reference list of full names</param>
            <param name="shortNames">The list of short names.</param>
            <returns>The list of full names.</returns>
        </member>
        <member name="M:Zenseless.HLGL.ContentLoaderExtensions.Load``1(Zenseless.HLGL.IContentLoader,System.String)">
            <summary>
            Creates an instance of a given type from the resource with the specified name.
            </summary>
            <typeparam name="TYPE">The type to create.</typeparam>
            <param name="contentLoader">A content loader instance.</param>
            <param name="name">The name of the resource to load from.</param>
            <returns>
            An instance of the given type.
            </returns>
        </member>
        <member name="M:Zenseless.HLGL.ContentLoaderExtensions.LoadPixelShader(Zenseless.HLGL.IContentLoader,System.String)">
            <summary>
            
            </summary>
            <param name="contentLoader"></param>
            <param name="name"></param>
            <returns></returns>
        </member>
        <member name="M:Zenseless.HLGL.ContentLoaderExtensions.FindFiles(System.Collections.Generic.IEnumerable{System.String},System.String)">
            <summary>
            Find files in the search directory that match the names, in resource name form. 
            This feature is disabled otherwise. The execution time of this command is dependent on the file count inside the given directory.
            </summary>
            <param name="names">The file names to find.</param>
            <param name="searchDirectory">The search directory. Files are found in this directory or subdirectories</param>
        </member>
        <member name="T:Zenseless.HLGL.FileContentManager">
            <summary>
            A content manager for file and resource based content management. 
            If a file is available for a resource, the file will be loaded and if changed during run-time the content is recreated
            </summary>
            <seealso cref="T:Zenseless.HLGL.CachedContentManagerDecorator" />
        </member>
        <member name="M:Zenseless.HLGL.FileContentManager.#ctor(Zenseless.HLGL.INamedStreamLoader)">
            <summary>
            Initializes a new instance of the <see cref="T:Zenseless.HLGL.FileContentManager"/> class.
            </summary>
            <param name="loader"></param>
        </member>
        <member name="T:Zenseless.HLGL.FileContentManager.Updater`1">
            <summary>
            Updater delegate
            </summary>
            <typeparam name="TYPE">The type of the instance.</typeparam>
            <param name="instance">The instance.</param>
            <param name="resources">The resources to load into the instance.</param>
        </member>
        <member name="P:Zenseless.HLGL.FileContentManager.ImporterTypes">
            <summary>
            Gets a list of registered importer types.
            </summary>
            <value>
            The importer types.
            </value>
        </member>
        <member name="P:Zenseless.HLGL.FileContentManager.Names">
            <summary>
            Enumerates all content resource names.
            </summary>
            <value>
            All content resource names.
            </value>
        </member>
        <member name="M:Zenseless.HLGL.FileContentManager.CheckForResourceChange">
            <summary>
            Checks for resource change.
            </summary>
        </member>
        <member name="M:Zenseless.HLGL.FileContentManager.GetFilePath(System.String)">
            <summary>
            Gets the file path.
            </summary>
            <param name="fullName">The full name.</param>
            <returns><seealso cref="F:System.String.Empty"/> if no file path was found.</returns>
        </member>
        <member name="M:Zenseless.HLGL.FileContentManager.Load``1(System.Collections.Generic.IEnumerable{System.String})">
            <summary>
            Creates an instance of a given type from the resources with the specified names.
            </summary>
            <typeparam name="TYPE">The type to create.</typeparam>
            <param name="names">A list of resource names.</param>
            <returns>
            An instance of the given type.
            </returns>
        </member>
        <member name="M:Zenseless.HLGL.FileContentManager.RegisterImporter``1(System.Func{System.Collections.Generic.IEnumerable{Zenseless.HLGL.NamedStream},``0})">
            <summary>
            Registers an importer.
            </summary>
            <typeparam name="TYPE">The return type of the importer.</typeparam>
            <param name="importer">The importer instance.</param>
        </member>
        <member name="M:Zenseless.HLGL.FileContentManager.RegisterUpdater``1(Zenseless.HLGL.FileContentManager.Updater{``0})">
            <summary>
            Registers the updater.
            </summary>
            <typeparam name="TYPE">The type of the ype.</typeparam>
            <param name="updater">The updater.</param>
            <exception cref="T:System.ArgumentNullException"></exception>
        </member>
        <member name="M:Zenseless.HLGL.FileContentManager.SetContentSearchDirectory(System.String)">
            <summary>
            Sets the content search directory. 
            This is needed if you want to do automatic runtime content reloading if the content source file changes. 
            This feature is disabled otherwise. The execution time of this command is dependent on how many files are found inside the given directory.
            </summary>
            <param name="contentSearchDirectory">The content search directory. Content is found in this directory or subdirectories</param>		
        </member>
        <member name="T:Zenseless.HLGL.FileLoader">
            <summary>
            
            </summary>
            <seealso cref="T:Zenseless.HLGL.INamedStreamLoader" />
        </member>
        <member name="P:Zenseless.HLGL.FileLoader.Names">
            <summary>
            Enumerates all stream names.
            </summary>
            <value>
            All stream names.
            </value>
        </member>
        <member name="M:Zenseless.HLGL.FileLoader.AddMapping(System.String,System.String)">
            <summary>
            Adds the mapping.
            </summary>
            <param name="name">The name.</param>
            <param name="filePath">The file path.</param>
            <exception cref="T:System.ArgumentException"></exception>
        </member>
        <member name="M:Zenseless.HLGL.FileLoader.Exists(System.String)">
            <summary>
            Determines whether the specified name is known.
            </summary>
            <param name="name">The name.</param>
            <returns>
              <c>true</c> if the specified name is known; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:Zenseless.HLGL.FileLoader.Open(System.String)">
            <summary>
            Gets the stream with the given name.
            </summary>
            <param name="name">The name of the stream.</param>
            <returns>
            A <seealso cref="T:Zenseless.HLGL.NamedStream" />.
            </returns>
            <exception cref="T:System.ArgumentException"></exception>
        </member>
        <member name="M:Zenseless.HLGL.FileLoader.GetFilePath(System.String)">
            <summary>
            Gets the file path.
            </summary>
            <param name="fullName">The full name.</param>
            <returns><seealso cref="F:System.String.Empty"/> if no file path was found.</returns>
        </member>
        <member name="M:Zenseless.HLGL.FileLoader.DisposeResources">
            <summary>
            
            </summary>
        </member>
        <member name="T:Zenseless.HLGL.IContentLoader">
            <summary>
            A content loader interface
            </summary>
        </member>
        <member name="P:Zenseless.HLGL.IContentLoader.ImporterTypes">
            <summary>
            Gets a list of registered importer types.
            </summary>
            <value>
            The importer types.
            </value>
        </member>
        <member name="P:Zenseless.HLGL.IContentLoader.Names">
            <summary>
            Enumerates all content resource names.
            </summary>
            <value>
            All content resource names.
            </value>
        </member>
        <member name="M:Zenseless.HLGL.IContentLoader.Load``1(System.Collections.Generic.IEnumerable{System.String})">
            <summary>
            Creates an instance of a given type from the resources with the specified names.
            </summary>
            <typeparam name="TYPE">The type to create.</typeparam>
            <param name="names">A list of resource names.</param>
            <returns>An instance of the given type.</returns>
        </member>
        <member name="T:Zenseless.HLGL.INamedStreamLoader">
            <summary>
            Interface for a creator of named streams
            </summary>
        </member>
        <member name="P:Zenseless.HLGL.INamedStreamLoader.Names">
            <summary>
            If a finite set of stream names are known these are enumerated (like for a resource assembly), otherwise (like for a file system) an empty set is returned.
            </summary>
            <value>
            List of names or null;
            </value>		
        </member>
        <member name="M:Zenseless.HLGL.INamedStreamLoader.Open(System.String)">
            <summary>
            Opens a stream with the given name.
            </summary>
            <param name="name">The name of the stream.</param>
            <returns>A <seealso cref="T:Zenseless.HLGL.NamedStream"/>.</returns>
        </member>
        <member name="M:Zenseless.HLGL.INamedStreamLoader.Exists(System.String)">
            <summary>
            Check if the specified name exists.
            </summary>
            <param name="name">The name.</param>
            <returns></returns>
        </member>
        <member name="T:Zenseless.HLGL.NamedStreamExtensions">
            <summary>
            Extension methods for The <seealso cref="T:Zenseless.HLGL.NamedStream"/> class
            </summary>
        </member>
        <member name="M:Zenseless.HLGL.NamedStreamExtensions.Dispose(System.Collections.Generic.IEnumerable{Zenseless.HLGL.NamedStream})">
            <summary>
            Disposes the list of named streams.
            </summary>
            <param name="namedStreams">The named streams.</param>
        </member>
        <member name="T:Zenseless.HLGL.NamedStreamLoaderCollection">
            <summary>
            
            </summary>
        </member>
        <member name="P:Zenseless.HLGL.NamedStreamLoaderCollection.Names">
            <summary>
            If a finite set of stream names are known these are enumerated (like for a resource assembly), null otherwise (like for a file system).
            </summary>
            <value>
            List of names or null;
            </value>
        </member>
        <member name="M:Zenseless.HLGL.NamedStreamLoaderCollection.Add(Zenseless.HLGL.INamedStreamLoader,System.Boolean)">
            <summary>
            Adds the specified loader.
            </summary>
            <param name="loader">The loader.</param>
            <param name="highPriority">if set to <c>true</c> [high priority].</param>
        </member>
        <member name="M:Zenseless.HLGL.NamedStreamLoaderCollection.Exists(System.String)">
            <summary>
            Check if the specified name exists.
            </summary>
            <param name="name">The name.</param>
            <returns></returns>
        </member>
        <member name="M:Zenseless.HLGL.NamedStreamLoaderCollection.Open(System.String)">
            <summary>
            Opens a stream with the given name.
            </summary>
            <param name="name">The name of the stream.</param>
            <returns>
            A <seealso cref="T:Zenseless.HLGL.NamedStream" />.
            </returns>
        </member>
        <member name="T:Zenseless.HLGL.NewCacheEntryEventArgs">
            <summary>
            Class for event argument for the NewCacheEntry event
            </summary>
            <seealso cref="T:System.EventArgs" />
        </member>
        <member name="M:Zenseless.HLGL.NewCacheEntryEventArgs.#ctor(System.Object,System.String,System.Collections.Generic.IEnumerable{System.String})">
            <summary>
            Initializes a new instance of the <see cref="T:Zenseless.HLGL.NewCacheEntryEventArgs"/> class.
            </summary>
            <param name="name">The name of the cache entry.</param>
            <param name="names"></param>
            <param name="instance"></param>
            <exception cref="T:System.ArgumentNullException">name</exception>
        </member>
        <member name="P:Zenseless.HLGL.NewCacheEntryEventArgs.Instance">
            <summary>
            Gets the instance.
            </summary>
            <value>
            The instance.
            </value>
        </member>
        <member name="P:Zenseless.HLGL.NewCacheEntryEventArgs.Name">
            <summary>
            Gets the name.
            </summary>
            <value>
            The name.
            </value>
        </member>
        <member name="P:Zenseless.HLGL.NewCacheEntryEventArgs.Names">
            <summary>
            Gets the names.
            </summary>
            <value>
            The names.
            </value>
        </member>
        <member name="T:Zenseless.HLGL.ContentSearchDirectoryAttribute">
            <summary>
            Defines an attribute that is used by Zenseless to set the content search directory
            </summary>
            <seealso cref="T:System.Attribute" />
        </member>
        <member name="M:Zenseless.HLGL.ContentSearchDirectoryAttribute.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Zenseless.HLGL.ContentSearchDirectoryAttribute"/> class.
            </summary>
            <param name="contentSearchDirectory">The content search directory.</param>
        </member>
        <member name="P:Zenseless.HLGL.ContentSearchDirectoryAttribute.ContentSearchDirectory">
            <summary>
            Gets the content search directory.
            </summary>
            <value>
            The content search directory.
            </value>
        </member>
        <member name="M:Zenseless.HLGL.ContentSearchDirectoryAttribute.GetContentSearchDirectory">
            <summary>
            Gets the content search directory. Static version.
            </summary>
            <returns></returns>
        </member>
        <member name="T:Zenseless.HLGL.FloatUniform">
            <summary>
            
            </summary>
            <seealso cref="T:Zenseless.HLGL.IUniform" />
        </member>
        <member name="M:Zenseless.HLGL.FloatUniform.#ctor(System.String,System.Single)">
            <summary>
            Initializes a new instance of the <see cref="T:Zenseless.HLGL.FloatUniform"/> struct.
            </summary>
            <param name="name">The name.</param>
            <param name="value">The value.</param>
        </member>
        <member name="P:Zenseless.HLGL.FloatUniform.Name">
            <summary>
            Gets the name of the uniform.
            </summary>
            <value>
            The name.
            </value>
        </member>
        <member name="P:Zenseless.HLGL.FloatUniform.Value">
            <summary>
            Gets the value.
            </summary>
            <value>
            The value.
            </value>
        </member>
        <member name="M:Zenseless.HLGL.FloatUniform.Update(Zenseless.HLGL.IShaderProgram)">
            <summary>
            Updates the specified program.
            </summary>
            <param name="program">The program.</param>
        </member>
        <member name="T:Zenseless.HLGL.IAfterRendering">
            <summary>
            Interface for handlers that need to be called once a frame after rendering
            </summary>
        </member>
        <member name="M:Zenseless.HLGL.IAfterRendering.AfterRendering">
            <summary>
            Will be called once a frame after rendering, but before the buffer swap. 
            </summary>
        </member>
        <member name="T:Zenseless.HLGL.IBeforeRendering">
            <summary>
            Interface for handlers that need to be called once a frame before rendering
            </summary>
        </member>
        <member name="M:Zenseless.HLGL.IBeforeRendering.BeforeRendering">
            <summary>
            Will be called once a frame before rendering. 
            </summary>
        </member>
        <member name="T:Zenseless.HLGL.IDrawable">
            <summary>
            An interface that allows instanced drawing
            </summary>
        </member>
        <member name="M:Zenseless.HLGL.IDrawable.Draw(System.Int32)">
            <summary>
            Draws the <seealso cref="T:Zenseless.HLGL.IDrawable"/> instance count times.
            </summary>
            <param name="instanceCount">The instance count (default is 1).</param>
        </member>
        <member name="M:Zenseless.HLGL.IDrawable.Draw">
            <summary>
            Draws the <seealso cref="T:Zenseless.HLGL.IDrawable"/>. If instance attributes are present it will be drawn instance count times.
            </summary>
        </member>
        <member name="T:Zenseless.HLGL.IRenderSurface">
            <summary>
            
            </summary>
        </member>
        <member name="P:Zenseless.HLGL.IRenderSurface.Texture">
            <summary>
            Gets the texture.
            </summary>
            <value>
            The texture.
            </value>
        </member>
        <member name="P:Zenseless.HLGL.IRenderSurface.Textures">
            <summary>
            Gets the textures.
            </summary>
            <value>
            The textures.
            </value>
        </member>
        <member name="M:Zenseless.HLGL.IRenderSurface.Activate">
            <summary>
            Activates this instance.
            </summary>
        </member>
        <member name="M:Zenseless.HLGL.IRenderSurface.Draw(System.Action)">
            <summary>
            Draws onto the render surface using the specified draw code.
            </summary>
            <param name="drawCode">The draw code.</param>
        </member>
        <member name="M:Zenseless.HLGL.IRenderSurface.Attach(Zenseless.HLGL.ITexture2D)">
            <summary>
            Attaches the specified texture.
            </summary>
            <param name="texture">The texture.</param>
        </member>
        <member name="M:Zenseless.HLGL.IRenderSurface.Deactivate">
            <summary>
            Deactivates this instance.
            </summary>
        </member>
        <member name="T:Zenseless.HLGL.IUniform">
            <summary>
            Interface for a shader uniform
            </summary>
        </member>
        <member name="P:Zenseless.HLGL.IUniform.Name">
            <summary>
            Gets the name of the uniform.
            </summary>
            <value>
            The name.
            </value>
        </member>
        <member name="M:Zenseless.HLGL.IUniform.Update(Zenseless.HLGL.IShaderProgram)">
            <summary>
            Updates the uniform for the given shader program.
            </summary>
            <param name="shaderProgram">The shader program.</param>
        </member>
        <member name="T:Zenseless.HLGL.Mat4Uniform">
            <summary>
            
            </summary>
            <seealso cref="T:Zenseless.HLGL.IUniform" />
        </member>
        <member name="M:Zenseless.HLGL.Mat4Uniform.#ctor(System.String,System.Numerics.Matrix4x4)">
            <summary>
            Initializes a new instance of the <see cref="T:Zenseless.HLGL.Mat4Uniform"/> struct.
            </summary>
            <param name="name">The name.</param>
            <param name="value">The value.</param>
        </member>
        <member name="P:Zenseless.HLGL.Mat4Uniform.Name">
            <summary>
            Gets the name of the uniform.
            </summary>
            <value>
            The name.
            </value>
        </member>
        <member name="P:Zenseless.HLGL.Mat4Uniform.Value">
            <summary>
            Gets the value.
            </summary>
            <value>
            The value.
            </value>
        </member>
        <member name="M:Zenseless.HLGL.Mat4Uniform.Update(Zenseless.HLGL.IShaderProgram)">
            <summary>
            Updates the specified program.
            </summary>
            <param name="program">The program.</param>
        </member>
        <member name="T:Zenseless.HLGL.ShaderExtensions">
            <summary>
            
            </summary>
        </member>
        <member name="M:Zenseless.HLGL.ShaderExtensions.Uniform(Zenseless.HLGL.IShaderProgram,System.String,Zenseless.Geometry.ITransformation@)">
            <summary>
            Set transformation uniforms (mat4) on active shader. The correct shader has to be activated first!
            </summary>
            <param name="shaderProgram">The shader program.</param>
            <param name="name">The uniform variable name.</param>
            <param name="transformation">The transformation</param>
        </member>
        <member name="T:Zenseless.HLGL.TransformUniform">
            <summary>
            
            </summary>
            <seealso cref="T:Zenseless.HLGL.IUniform" />
        </member>
        <member name="M:Zenseless.HLGL.TransformUniform.#ctor(System.String,Zenseless.Geometry.ITransformation)">
            <summary>
            Initializes a new instance of the <see cref="T:Zenseless.HLGL.TransformUniform"/> struct.
            </summary>
            <param name="name">The name.</param>
            <param name="value">The value.</param>
        </member>
        <member name="P:Zenseless.HLGL.TransformUniform.Name">
            <summary>
            Gets the name of the uniform.
            </summary>
            <value>
            The name.
            </value>
        </member>
        <member name="P:Zenseless.HLGL.TransformUniform.Value">
            <summary>
            Gets the value.
            </summary>
            <value>
            The value.
            </value>
        </member>
        <member name="M:Zenseless.HLGL.TransformUniform.Update(Zenseless.HLGL.IShaderProgram)">
            <summary>
            Updates the specified program.
            </summary>
            <param name="program">The program.</param>
        </member>
        <member name="T:Zenseless.HLGL.Vec3Uniform">
            <summary>
            
            </summary>
            <seealso cref="T:Zenseless.HLGL.IUniform" />
        </member>
        <member name="M:Zenseless.HLGL.Vec3Uniform.#ctor(System.String,System.Numerics.Vector3)">
            <summary>
            Initializes a new instance of the <see cref="T:Zenseless.HLGL.Vec3Uniform"/> struct.
            </summary>
            <param name="name">The name.</param>
            <param name="value">The value.</param>
        </member>
        <member name="P:Zenseless.HLGL.Vec3Uniform.Name">
            <summary>
            Gets the name of the uniform.
            </summary>
            <value>
            The name.
            </value>
        </member>
        <member name="P:Zenseless.HLGL.Vec3Uniform.Value">
            <summary>
            Gets the value.
            </summary>
            <value>
            The value.
            </value>
        </member>
        <member name="M:Zenseless.HLGL.Vec3Uniform.Update(Zenseless.HLGL.IShaderProgram)">
            <summary>
            Updates the specified program.
            </summary>
            <param name="program">The program.</param>
        </member>
        <member name="T:Zenseless.HLGL.ActiveRenderSurface">
            <summary>
            State structure for the active render surface.
            </summary>
        </member>
        <member name="M:Zenseless.HLGL.ActiveRenderSurface.#ctor(Zenseless.HLGL.IRenderSurface)">
            <summary>
            Initializes a new instance of the <see cref="T:Zenseless.HLGL.ActiveRenderSurface" /> structure.
            </summary>
            <param name="renderSurface">The render surface.</param>
        </member>
        <member name="P:Zenseless.HLGL.ActiveRenderSurface.RenderSurface">
            <summary>
            Gets the shader program.
            </summary>
            <value>
            The shader program.
            </value>
        </member>
        <member name="T:Zenseless.HLGL.ActiveShader">
            <summary>
            State structure for the active shader program.
            </summary>
        </member>
        <member name="M:Zenseless.HLGL.ActiveShader.#ctor(Zenseless.HLGL.IShaderProgram)">
            <summary>
            Initializes a new instance of the <see cref="T:Zenseless.HLGL.ActiveShader"/> structure.
            </summary>
            <param name="shaderProgram">The shader program.</param>
        </member>
        <member name="P:Zenseless.HLGL.ActiveShader.ShaderProgram">
            <summary>
            Gets the shader program.
            </summary>
            <value>
            The shader program.
            </value>
        </member>
        <member name="T:Zenseless.HLGL.FaceCullingMode">
            <summary>
            Mode for culling of face sides
            </summary>
        </member>
        <member name="F:Zenseless.HLGL.FaceCullingMode.NONE">
            <summary>
            No side will be culled
            </summary>
        </member>
        <member name="F:Zenseless.HLGL.FaceCullingMode.FRONT_SIDE">
            <summary>
            The front side will be culled
            </summary>
        </member>
        <member name="F:Zenseless.HLGL.FaceCullingMode.BACK_SIDE">
            <summary>
            The back side will be culled
            </summary>
        </member>
        <member name="T:Zenseless.HLGL.FaceCullingModeState">
            <summary>
            State structure for face culling. Mostly used for enabling back-face culling
            </summary>
        </member>
        <member name="M:Zenseless.HLGL.FaceCullingModeState.#ctor(Zenseless.HLGL.FaceCullingMode)">
            <summary>
            Initializes a new instance of the <see cref="T:Zenseless.HLGL.FaceCullingModeState"/> structure.
            </summary>
            <param name="faceCullingMode">The face culling mode.</param>
        </member>
        <member name="P:Zenseless.HLGL.FaceCullingModeState.Mode">
            <summary>
            Gets the face culling mode.
            </summary>
            <value>
            The face culling mode.
            </value>
        </member>
        <member name="T:Zenseless.HLGL.BlendOperator">
            <summary>
            Represents the arithmetic functions that may be used when blending alpha values.
            </summary>
        </member>
        <member name="F:Zenseless.HLGL.BlendOperator.Add">
            <summary>
            The source value is added to the destination value.
            </summary>
        </member>
        <member name="F:Zenseless.HLGL.BlendOperator.Max">
            <summary>
            The maximum of the source and destination values.
            </summary>
        </member>
        <member name="F:Zenseless.HLGL.BlendOperator.Min">
            <summary>
            The minimum of the source and destination values is used.
            </summary>
        </member>
        <member name="F:Zenseless.HLGL.BlendOperator.None">
            <summary>
            Blending is disabled.
            </summary>
        </member>
        <member name="F:Zenseless.HLGL.BlendOperator.ReverseSubtract">
            <summary>
            The source value is subtracted from the destination value.
            </summary>
        </member>
        <member name="F:Zenseless.HLGL.BlendOperator.Subtract">
            <summary>
            The destination value is subtracted from the source value.
            </summary>
        </member>
        <member name="T:Zenseless.HLGL.BlendParameter">
            <summary>
            Represents the available blending parameters.
            </summary>
        </member>
        <member name="F:Zenseless.HLGL.BlendParameter.Zero">
            <summary>
            The components of the blended color are multiplied by zero.
            </summary>
        </member>
        <member name="F:Zenseless.HLGL.BlendParameter.One">
            <summary>
            The components of the blended color are multiplied by one.
            </summary>
        </member>
        <member name="F:Zenseless.HLGL.BlendParameter.SourceColor">
            <summary>
            The components of the blended color are multiplied by the source color.
            </summary>
        </member>
        <member name="F:Zenseless.HLGL.BlendParameter.OneMinusSourceColor">
            <summary>
            The components of the blended color are multiplied by (1, 1, 1, 1) - the source color.
            </summary>
        </member>
        <member name="F:Zenseless.HLGL.BlendParameter.SourceAlpha">
            <summary>
            The components of the blended color are multiplied by the source alpha.
            </summary>
        </member>
        <member name="F:Zenseless.HLGL.BlendParameter.OneMinusSourceAlpha">
            <summary>
            The components of the blended color are multiplied by 1 - the source alpha.
            </summary>
        </member>
        <member name="F:Zenseless.HLGL.BlendParameter.DestinationAlpha">
            <summary>
            The components of the blended color are multiplied by the destination alpha.
            </summary>
        </member>
        <member name="F:Zenseless.HLGL.BlendParameter.OneMinusDestinationAlpha">
            <summary>
            The components of the blended color are multiplied by 1 - the destination alpha.
            </summary>
        </member>
        <member name="F:Zenseless.HLGL.BlendParameter.DestinationColor">
            <summary>
            The components of the blended color are multiplied by the destination color.
            </summary>
        </member>
        <member name="F:Zenseless.HLGL.BlendParameter.OneMinusDestinationColor">
            <summary>
            The components of the blended color are multiplied by (1, 1, 1, 1) - the destination color.
            </summary>
        </member>
        <member name="F:Zenseless.HLGL.BlendParameter.SourceAlphaSaturation">
            <summary>
            The components of the blended color are multiplied by the larger of 
            the alpha of the source color or 1 - the alpha of the source color.
            </summary>
        </member>
        <member name="T:Zenseless.HLGL.BlendState">
            <summary>
            Encapsulates the blend state inside an immutable structure
            </summary>
        </member>
        <member name="M:Zenseless.HLGL.BlendState.#ctor(Zenseless.HLGL.BlendOperator,Zenseless.HLGL.BlendParameter,Zenseless.HLGL.BlendParameter)">
            <summary>
            Initializes a new instance of the <see cref="T:Zenseless.HLGL.BlendState"/> structure.
            </summary>
            <param name="blendOperator">The blend function operator.</param>
            <param name="blendParameterSource">The source blend parameter.</param>
            <param name="blendParameterDestination">The destination blend parameter.</param>
        </member>
        <member name="P:Zenseless.HLGL.BlendState.BlendOperator">
            <summary>
            Gets the blend function operator.
            </summary>
            <value>
            The blend function operator.
            </value>
        </member>
        <member name="P:Zenseless.HLGL.BlendState.BlendParameterSource">
            <summary>
            Gets the blend parameter source.
            </summary>
            <value>
            The blend parameter source.
            </value>
        </member>
        <member name="P:Zenseless.HLGL.BlendState.BlendParameterDestination">
            <summary>
            Gets the blend parameter destination.
            </summary>
            <value>
            The blend parameter destination.
            </value>
        </member>
        <member name="T:Zenseless.HLGL.BlendStates">
            <summary>
            Predefined commonly used blend states
            </summary>
        </member>
        <member name="F:Zenseless.HLGL.BlendStates.Additive">
            <summary>
            Additive blending
            </summary>
        </member>
        <member name="F:Zenseless.HLGL.BlendStates.AlphaBlend">
            <summary>
            Alpha blending (transparency)
            </summary>
        </member>
        <member name="F:Zenseless.HLGL.BlendStates.Opaque">
            <summary>
            Opaque blending (blending disabled)
            </summary>
        </member>
        <member name="T:Zenseless.HLGL.ClearColorState">
            <summary>
            The color used by the graphic system for clearing the screen.
            </summary>
        </member>
        <member name="M:Zenseless.HLGL.ClearColorState.#ctor(System.Single,System.Single,System.Single,System.Single)">
            <summary>
            Initializes a new instance of the <see cref="T:Zenseless.HLGL.ClearColorState"/> struct.
            </summary>
            <param name="red">The red.</param>
            <param name="green">The green.</param>
            <param name="blue">The blue.</param>
            <param name="alpha">The alpha.</param>
        </member>
        <member name="P:Zenseless.HLGL.ClearColorState.Red">
            <summary>
            Gets the red.
            </summary>
            <value>
            The red.
            </value>
        </member>
        <member name="P:Zenseless.HLGL.ClearColorState.Green">
            <summary>
            Gets the green.
            </summary>
            <value>
            The green.
            </value>
        </member>
        <member name="P:Zenseless.HLGL.ClearColorState.Blue">
            <summary>
            Gets the blue.
            </summary>
            <value>
            The blue.
            </value>
        </member>
        <member name="P:Zenseless.HLGL.ClearColorState.Alpha">
            <summary>
            Gets the alpha.
            </summary>
            <value>
            The alpha.
            </value>
        </member>
        <member name="T:Zenseless.HLGL.ContentManager">
            <summary>
            Implementation of a content manager
            </summary>
            <seealso cref="T:Zenseless.HLGL.IContentManager" />
        </member>
        <member name="M:Zenseless.HLGL.ContentManager.#ctor(Zenseless.HLGL.INamedStreamLoader)">
            <summary>
            Initializes a new instance of the <see cref="T:Zenseless.HLGL.ContentManager"/> class.
            </summary>
            <param name="loader">The loader.</param>
            <exception cref="T:System.ArgumentNullException">loader</exception>
        </member>
        <member name="P:Zenseless.HLGL.ContentManager.ImporterTypes">
            <summary>
            Gets a list of registered importer types.
            </summary>
            <value>
            The importer types.
            </value>
        </member>
        <member name="P:Zenseless.HLGL.ContentManager.Names">
            <summary>
            Enumerates all content resource names.
            </summary>
            <value>
            All content resource names.
            </value>
        </member>
        <member name="M:Zenseless.HLGL.ContentManager.RegisterImporter``1(System.Func{System.Collections.Generic.IEnumerable{Zenseless.HLGL.NamedStream},``0})">
            <summary>
            Registers an importer.
            </summary>
            <typeparam name="TYPE">The return type of the importer.</typeparam>
            <param name="importer">The importer instance.</param>
            <exception cref="T:System.ArgumentException"></exception>
        </member>
        <member name="M:Zenseless.HLGL.ContentManager.Load``1(System.Collections.Generic.IEnumerable{System.String})">
            <summary>
            Creates an instance of a given type from the specified names.
            </summary>
            <typeparam name="TYPE">The type to create.</typeparam>
            <param name="names">A list of names.</param>
            <returns>
            An instance of the given type if an importer for the TYPE is registered.
            </returns>
            <exception cref="T:System.ArgumentException">
            </exception>
        </member>
        <member name="T:Zenseless.HLGL.IAnimation">
            <summary>
            
            </summary>
        </member>
        <member name="P:Zenseless.HLGL.IAnimation.AnimationLength">
            <summary>
            Gets or sets the length of the animation.
            </summary>
            <value>
            The length of the animation.
            </value>
        </member>
        <member name="M:Zenseless.HLGL.IAnimation.Draw(Zenseless.Geometry.IReadOnlyBox2D,System.Single)">
            <summary>
            Draws the specified rectangle.
            </summary>
            <param name="rectangle">The rectangle.</param>
            <param name="totalSeconds">The total seconds.</param>
        </member>
        <member name="T:Zenseless.HLGL.IContentManager">
            <summary>
            Interface for a content manager
            </summary>
            <seealso cref="T:Zenseless.HLGL.IContentLoader" />
        </member>
        <member name="M:Zenseless.HLGL.IContentManager.RegisterImporter``1(System.Func{System.Collections.Generic.IEnumerable{Zenseless.HLGL.NamedStream},``0})">
            <summary>
            Registers an importer.
            </summary>
            <typeparam name="TYPE">The return type of the importer.</typeparam>
            <param name="importer">The importer instance.</param>
            <exception cref="T:System.ArgumentNullException"></exception>
        </member>
        <member name="T:Zenseless.HLGL.IRenderContext">
            <summary>
            
            </summary>
        </member>
        <member name="P:Zenseless.HLGL.IRenderContext.RenderState">
            <summary>
            Gets the state of the render.
            </summary>
            <value>
            The state of the render.
            </value>
        </member>
        <member name="M:Zenseless.HLGL.IRenderContext.CreateRenderSurface(System.Int32,System.Int32,System.Boolean,System.Byte,System.Boolean)">
            <summary>
            Creates the render surface.
            </summary>
            <param name="width">The width.</param>
            <param name="height">The height.</param>
            <param name="hasDepthBuffer">if set to <c>true</c> [has depth buffer].</param>
            <param name="components">The components.</param>
            <param name="floatingPoint">if set to <c>true</c> [floating point].</param>
            <returns></returns>
        </member>
        <member name="M:Zenseless.HLGL.IRenderContext.GetFrameBuffer">
            <summary>
            Gets the frame buffer.
            </summary>
            <returns></returns>
        </member>
        <member name="T:Zenseless.HLGL.IDrawConfiguration">
            <summary>
            
            </summary>
        </member>
        <member name="P:Zenseless.HLGL.IDrawConfiguration.BackfaceCulling">
            <summary>
            Gets or sets a value indicating whether [backface culling].
            </summary>
            <value>
              <c>true</c> if [backface culling]; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:Zenseless.HLGL.IDrawConfiguration.InstanceCount">
            <summary>
            Gets or sets the instance count.
            </summary>
            <value>
            The instance count.
            </value>
        </member>
        <member name="P:Zenseless.HLGL.IDrawConfiguration.ShaderPointSize">
            <summary>
            Gets or sets a value indicating whether [shader point size].
            </summary>
            <value>
              <c>true</c> if [shader point size]; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:Zenseless.HLGL.IDrawConfiguration.ZBufferTest">
            <summary>
            Gets or sets a value indicating whether [z buffer test].
            </summary>
            <value>
              <c>true</c> if [z buffer test]; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="M:Zenseless.HLGL.IDrawConfiguration.Draw(Zenseless.HLGL.IRenderContext)">
            <summary>
            Draws the specified context.
            </summary>
            <param name="context">The context.</param>
        </member>
        <member name="M:Zenseless.HLGL.IDrawConfiguration.SetInputTexture(System.String,Zenseless.HLGL.IOldRenderSurface)">
            <summary>
            Sets the input texture.
            </summary>
            <param name="name">The name.</param>
            <param name="image">The image.</param>
        </member>
        <member name="M:Zenseless.HLGL.IDrawConfiguration.UpdateInstanceAttribute(System.String,System.Single[])">
            <summary>
            Updates the instance attribute.
            </summary>
            <param name="name">The name.</param>
            <param name="data">The data.</param>
        </member>
        <member name="M:Zenseless.HLGL.IDrawConfiguration.UpdateInstanceAttribute(System.String,System.Int32[])">
            <summary>
            Updates the instance attribute.
            </summary>
            <param name="name">The name.</param>
            <param name="data">The data.</param>
        </member>
        <member name="M:Zenseless.HLGL.IDrawConfiguration.UpdateInstanceAttribute(System.String,System.Numerics.Vector2[])">
            <summary>
            Updates the instance attribute.
            </summary>
            <param name="name">The name.</param>
            <param name="data">The data.</param>
        </member>
        <member name="M:Zenseless.HLGL.IDrawConfiguration.UpdateInstanceAttribute(System.String,System.Numerics.Vector3[])">
            <summary>
            Updates the instance attribute.
            </summary>
            <param name="name">The name.</param>
            <param name="data">The data.</param>
        </member>
        <member name="M:Zenseless.HLGL.IDrawConfiguration.UpdateInstanceAttribute(System.String,System.Numerics.Vector4[])">
            <summary>
            Updates the instance attribute.
            </summary>
            <param name="name">The name.</param>
            <param name="data">The data.</param>
        </member>
        <member name="M:Zenseless.HLGL.IDrawConfiguration.UpdateShaderBuffer``1(System.String,``0[])">
            <summary>
            Updates the shader buffer.
            </summary>
            <typeparam name="DATA_ELEMENT_TYPE">The type of the ata element type.</typeparam>
            <param name="name">The name.</param>
            <param name="uniformArray">The uniform array.</param>
        </member>
        <member name="M:Zenseless.HLGL.IDrawConfiguration.UpdateUniformBuffer``1(System.String,``0)">
            <summary>
            Updates the uniforms.
            </summary>
            <typeparam name="DATA">The type of the ata.</typeparam>
            <param name="name">The name.</param>
            <param name="uniforms">The uniforms.</param>
        </member>
        <member name="T:Zenseless.HLGL.DepthTest">
            <summary>
            State structure for depth test.
            </summary>
        </member>
        <member name="M:Zenseless.HLGL.DepthTest.#ctor(System.Boolean)">
            <summary>
            Initializes a new instance of the <see cref="T:Zenseless.HLGL.DepthTest"/> structure.
            </summary>
            <param name="enabled">if set to <c>true</c> [enabled].</param>
        </member>
        <member name="P:Zenseless.HLGL.DepthTest.Enabled">
            <summary>
            Gets a value indicating whether the <see cref="T:Zenseless.HLGL.DepthTest"/> is enabled.
            </summary>
            <value>
              <c>true</c> if enabled; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="T:Zenseless.HLGL.IRenderState">
            <summary>
            
            </summary>
        </member>
        <member name="M:Zenseless.HLGL.IRenderState.Get``1">
            <summary>
            Gets this instance.
            </summary>
            <typeparam name="TYPE">The type of the ype.</typeparam>
            <returns></returns>
        </member>
        <member name="M:Zenseless.HLGL.IRenderState.Set``1(``0@)">
            <summary>
            Sets the specified value.
            </summary>
            <typeparam name="TYPE">The type of the ype.</typeparam>
            <param name="value">The value.</param>
        </member>
        <member name="T:Zenseless.HLGL.IOldRenderSurface">
            <summary>
            
            </summary>
        </member>
        <member name="P:Zenseless.HLGL.IOldRenderSurface.Texture">
            <summary>
            Gets the texture.
            </summary>
            <value>
            The texture.
            </value>
        </member>
        <member name="M:Zenseless.HLGL.IOldRenderSurface.Clear">
            <summary>
            Clears this instance.
            </summary>
        </member>
        <member name="M:Zenseless.HLGL.IOldRenderSurface.Draw(Zenseless.HLGL.IDrawConfiguration)">
            <summary>
            Draws the specified configuration.
            </summary>
            <param name="config">The configuration.</param>
        </member>
        <member name="T:Zenseless.HLGL.ShaderType">
            <summary>
            Enumeration of valid shader types
            </summary>
        </member>
        <member name="F:Zenseless.HLGL.ShaderType.FragmentShader">
            <summary>
            The fragment shader
            </summary>
        </member>
        <member name="F:Zenseless.HLGL.ShaderType.VertexShader">
            <summary>
            The vertex shader
            </summary>
        </member>
        <member name="F:Zenseless.HLGL.ShaderType.GeometryShader">
            <summary>
            The geometry shader
            </summary>
        </member>
        <member name="F:Zenseless.HLGL.ShaderType.TessEvaluationShader">
            <summary>
            The tessellation evaluation shader
            </summary>
        </member>
        <member name="F:Zenseless.HLGL.ShaderType.TessControlShader">
            <summary>
            The tessellation control shader
            </summary>
        </member>
        <member name="F:Zenseless.HLGL.ShaderType.ComputeShader">
            <summary>
            The compute shader
            </summary>
        </member>
        <member name="T:Zenseless.HLGL.ShaderResourceType">
            <summary>
            Enumeration of valid shader resource types
            </summary>
        </member>
        <member name="F:Zenseless.HLGL.ShaderResourceType.Uniform">
            <summary>
            The uniform
            </summary>
        </member>
        <member name="F:Zenseless.HLGL.ShaderResourceType.Attribute">
            <summary>
            The attribute
            </summary>
        </member>
        <member name="F:Zenseless.HLGL.ShaderResourceType.UniformBuffer">
            <summary>
            The uniform buffer
            </summary>
        </member>
        <member name="F:Zenseless.HLGL.ShaderResourceType.RWBuffer">
            <summary>
            The rw buffer
            </summary>
        </member>
        <member name="T:Zenseless.HLGL.IShaderProgram">
            <summary>
            Interface of a shader program
            </summary>
            <seealso cref="T:System.IDisposable" />
        </member>
        <member name="P:Zenseless.HLGL.IShaderProgram.ProgramID">
            <summary>
            Gets the program identifier.
            </summary>
            <value>
            The program identifier.
            </value>
        </member>
        <member name="M:Zenseless.HLGL.IShaderProgram.Activate">
            <summary>
            Activates this instance.
            </summary>
        </member>
        <member name="M:Zenseless.HLGL.IShaderProgram.Deactivate">
            <summary>
            Deactivates this instance.
            </summary>
        </member>
        <member name="M:Zenseless.HLGL.IShaderProgram.GetResourceLocation(Zenseless.HLGL.ShaderResourceType,System.String)">
            <summary>
            Gets the resource location.
            </summary>
            <param name="resourceType">Type of the resource.</param>
            <param name="name">The name.</param>
            <returns></returns>
        </member>
        <member name="M:Zenseless.HLGL.IShaderProgram.Uniform(System.String,System.Int32)">
            <summary>
            Set int Uniform on active shader.
            </summary>
            <param name="name">The uniform variable name.</param>
            <param name="value">The value to set.</param>
        </member>
        <member name="M:Zenseless.HLGL.IShaderProgram.Uniform(System.String,System.Single)">
            <summary>
            Set float Uniform on active shader.
            </summary>
            <param name="name">The uniform variable name.</param>
            <param name="value">The value to set.</param>
        </member>
        <member name="M:Zenseless.HLGL.IShaderProgram.Uniform(System.String,System.Numerics.Vector2@)">
            <summary>
            Set Vector2 Uniform on active shader.
            </summary>
            <param name="name">The uniform variable name.</param>
            <param name="vector">The vector.</param>
        </member>
        <member name="M:Zenseless.HLGL.IShaderProgram.Uniform(System.String,System.Numerics.Vector3@)">
            <summary>
            Set Vector3 Uniform on active shader.
            </summary>
            <param name="name">The uniform variable name.</param>
            <param name="vector">The vector.</param>
        </member>
        <member name="M:Zenseless.HLGL.IShaderProgram.Uniform(System.String,System.Numerics.Vector4@)">
            <summary>
            Set Vector4 Uniform on active shader.
            </summary>
            <param name="name">The uniform variable name.</param>
            <param name="vector">The vector.</param>
        </member>
        <member name="M:Zenseless.HLGL.IShaderProgram.Uniform(System.String,System.Numerics.Matrix4x4@,System.Boolean)">
            <summary>
            Set matrix uniforms on active shader.
            </summary>
            <param name="name">The uniform variable name.</param>
            <param name="matrix">The input matrix.</param>
            <param name="transpose">if set to <c>true</c> the matrix is transposed.</param>
        </member>
        <member name="T:Zenseless.HLGL.TextureFilterMode">
            <summary>
            Enumeration of texture filtering modes
            </summary>
        </member>
        <member name="F:Zenseless.HLGL.TextureFilterMode.Nearest">
            <summary>
            Nearest neighbor filter mode (box filtering)
            </summary>
        </member>
        <member name="F:Zenseless.HLGL.TextureFilterMode.Linear">
            <summary>
            Linear filter mode (tent filtering)
            </summary>
        </member>
        <member name="F:Zenseless.HLGL.TextureFilterMode.Mipmap">
            <summary>
            Mipmap filter mode
            </summary>
        </member>
        <member name="T:Zenseless.HLGL.TextureWrapFunction">
            <summary>
            Enumeration of texture wrap function
            </summary>
        </member>
        <member name="F:Zenseless.HLGL.TextureWrapFunction.Repeat">
            <summary>
            The repeat
            </summary>
        </member>
        <member name="F:Zenseless.HLGL.TextureWrapFunction.MirroredRepeat">
            <summary>
            The mirrored repeat
            </summary>
        </member>
        <member name="F:Zenseless.HLGL.TextureWrapFunction.ClampToEdge">
            <summary>
            The clamp to edge
            </summary>
        </member>
        <member name="F:Zenseless.HLGL.TextureWrapFunction.ClampToBorder">
            <summary>
            The clamp to border
            </summary>
        </member>
        <member name="T:Zenseless.HLGL.ITexture">
            <summary>
            Base texture interface
            </summary>
            <seealso cref="T:System.IDisposable" />
        </member>
        <member name="P:Zenseless.HLGL.ITexture.Filter">
            <summary>
            Gets or sets the filter.
            </summary>
            <value>
            The filter.
            </value>
        </member>
        <member name="P:Zenseless.HLGL.ITexture.ID">
            <summary>
            Gets the identifier.
            </summary>
            <value>
            The identifier.
            </value>
        </member>
        <member name="P:Zenseless.HLGL.ITexture.WrapFunction">
            <summary>
            Gets or sets the wrap function.
            </summary>
            <value>
            The wrap function.
            </value>
        </member>
        <member name="M:Zenseless.HLGL.ITexture.Activate">
            <summary>
            Activates this instance.
            </summary>
        </member>
        <member name="M:Zenseless.HLGL.ITexture.Deactivate">
            <summary>
            Deactivates this instance.
            </summary>
        </member>
        <member name="T:Zenseless.HLGL.ITexture2D">
            <summary>
            
            </summary>
            <seealso cref="T:Zenseless.HLGL.ITexture" />
        </member>
        <member name="P:Zenseless.HLGL.ITexture2D.Height">
            <summary>
            Gets the height.
            </summary>
            <value>
            The height.
            </value>
        </member>
        <member name="P:Zenseless.HLGL.ITexture2D.Width">
            <summary>
            Gets the width.
            </summary>
            <value>
            The width.
            </value>
        </member>
        <member name="T:Zenseless.HLGL.ITexture2dArray">
            <summary>
            
            </summary>
            <seealso cref="T:Zenseless.HLGL.ITexture" />
        </member>
        <member name="P:Zenseless.HLGL.ITexture2dArray.Elements">
            <summary>
            Gets the elements.
            </summary>
            <value>
            The elements.
            </value>
        </member>
        <member name="P:Zenseless.HLGL.ITexture2dArray.Height">
            <summary>
            Gets the height.
            </summary>
            <value>
            The height.
            </value>
        </member>
        <member name="P:Zenseless.HLGL.ITexture2dArray.Width">
            <summary>
            Gets the width.
            </summary>
            <value>
            The width.
            </value>
        </member>
        <member name="T:Zenseless.HLGL.NamedStream">
            <summary>
            
            </summary>
        </member>
        <member name="F:Zenseless.HLGL.NamedStream.Name">
            <summary>
            The name
            </summary>
        </member>
        <member name="F:Zenseless.HLGL.NamedStream.Stream">
            <summary>
            The stream. Do not dispose the stream this will be handled by the content manager/loader
            </summary>
        </member>
        <member name="M:Zenseless.HLGL.NamedStream.#ctor(System.String,System.IO.Stream)">
            <summary>
            Initializes a new instance of the <see cref="T:Zenseless.HLGL.NamedStream"/> structure.
            </summary>
            <param name="name">The name of the stream.</param>
            <param name="stream">The stream.</param>
        </member>
        <member name="M:Zenseless.HLGL.NamedStream.DisposeResources">
            <summary>
            
            </summary>
        </member>
        <member name="M:Zenseless.HLGL.NamedStream.ToString">
            <summary>
            Returns a <see cref="T:System.String" /> that represents this instance.
            </summary>
            <returns>
            A <see cref="T:System.String" /> that represents this instance.
            </returns>
        </member>
        <member name="T:Zenseless.HLGL.LineSmoothing">
            <summary>
            State structure for anti-aliasing of lines (requires blending to work).
            </summary>
        </member>
        <member name="M:Zenseless.HLGL.LineSmoothing.#ctor(System.Boolean)">
            <summary>
            Anti-aliasing of lines (requires blending to work)
            </summary>
            <param name="enabled">if set to <c>true</c> [value].</param>
        </member>
        <member name="P:Zenseless.HLGL.LineSmoothing.Enabled">
            <summary>
            Gets a value indicating whether <see cref="T:Zenseless.HLGL.LineSmoothing"/> is enabled.
            </summary>
            <value>
              <c>true</c> if enabled; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="T:Zenseless.HLGL.LineWidth">
            <summary>
            
            </summary>
        </member>
        <member name="M:Zenseless.HLGL.LineWidth.#ctor(System.Single)">
            <summary>
            Initializes a new instance of the <see cref="T:Zenseless.HLGL.LineWidth"/> struct.
            </summary>
            <param name="value">The value.</param>
        </member>
        <member name="P:Zenseless.HLGL.LineWidth.Value">
            <summary>
            Gets the value.
            </summary>
            <value>
            The value.
            </value>
        </member>
        <member name="T:Zenseless.HLGL.PointSprite">
            <summary>
            State structure for point sprite generation.
            </summary>
        </member>
        <member name="M:Zenseless.HLGL.PointSprite.#ctor(System.Boolean)">
            <summary>
            Initializes a new instance of the <see cref="T:Zenseless.HLGL.PointSprite"/> structure.
            </summary>
            <param name="enabled">if set to <c>true</c> [enabled].</param>
        </member>
        <member name="P:Zenseless.HLGL.PointSprite.Enabled">
            <summary>
            Gets a value indicating whether the <see cref="T:Zenseless.HLGL.PointSprite"/> is enabled.
            </summary>
            <value>
              <c>true</c> if enabled; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="T:Zenseless.HLGL.RenderState">
            <summary>
            
            </summary>
        </member>
        <member name="T:Zenseless.HLGL.RenderState.UpdateHandler`1">
            <summary>
            Delegate type for the handling of state updates
            </summary>
            <typeparam name="T"></typeparam>
            <param name="oldState">The old state.</param>
            <param name="newState">The new state.</param>
        </member>
        <member name="M:Zenseless.HLGL.RenderState.Get``1">
            <summary>
            Gets this instance.
            </summary>
            <typeparam name="TYPE">The type of the instance.</typeparam>
            <returns></returns>
            <exception cref="T:System.ArgumentException"></exception>
        </member>
        <member name="M:Zenseless.HLGL.RenderState.Register``1(Zenseless.HLGL.RenderState.UpdateHandler{``0},``0@)">
            <summary>
            Registers the specified update.
            </summary>
            <typeparam name="TYPE">The type of the ype.</typeparam>
            <param name="update">The update.</param>
            <param name="defaultValue"></param>
        </member>
        <member name="M:Zenseless.HLGL.RenderState.Set``1(``0@)">
            <summary>
            Sets the specified value.
            </summary>
            <typeparam name="TYPE">The type of the value</typeparam>
            <param name="value">The value.</param>
            <exception cref="T:System.ArgumentException"></exception>
        </member>
        <member name="T:Zenseless.HLGL.ShaderException">
            <summary>
            The base exception class for shaders.
            </summary>
            <seealso cref="T:System.Exception" />
        </member>
        <member name="M:Zenseless.HLGL.ShaderException.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Zenseless.HLGL.ShaderException"/> class.
            </summary>
            <param name="message">The message that describes the error.</param>
        </member>
        <member name="M:Zenseless.HLGL.ShaderException.#ctor(System.String,System.Exception)">
            <summary>
            Initializes a new instance of the <see cref="T:Zenseless.HLGL.ShaderException"/> class.
            </summary>
            <param name="message">The error message that explains the reason for the exception.</param>
            <param name="innerException">The exception that is the cause of the current exception, or a null reference (<see langword="Nothing" /> in Visual Basic) if no inner exception is specified.</param>
        </member>
        <member name="T:Zenseless.HLGL.ShaderLinkException">
            <summary>
             Occurs when linking is failing.
            </summary>
            <seealso cref="T:Zenseless.HLGL.ShaderException" />
        </member>
        <member name="M:Zenseless.HLGL.ShaderLinkException.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Zenseless.HLGL.ShaderLinkException"/> class.
            </summary>
            <param name="message">The message that describes the error.</param>
        </member>
        <member name="T:Zenseless.HLGL.ShaderCompileException">
            <summary>
            Occurs when compilation is failing.
            </summary>
            <seealso cref="T:Zenseless.HLGL.ShaderException" />
        </member>
        <member name="M:Zenseless.HLGL.ShaderCompileException.#ctor(Zenseless.HLGL.ShaderType,System.String,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Zenseless.HLGL.ShaderCompileException"/> class.
            </summary>
            <param name="shaderType">Type of the shader.</param>
            <param name="message">The message.</param>
            <param name="shaderSourceCode">The shader source code.</param>
        </member>
        <member name="P:Zenseless.HLGL.ShaderCompileException.ShaderSourceCode">
            <summary>
            Gets the shader code.
            </summary>
            <value>
            The shader code.
            </value>
        </member>
        <member name="P:Zenseless.HLGL.ShaderCompileException.ShaderType">
            <summary>
            Gets the type of the shader.
            </summary>
            <value>
            The type of the shader.
            </value>
        </member>
        <member name="T:Zenseless.HLGL.ShaderLogLine">
            <summary>
            
            </summary>
        </member>
        <member name="F:Zenseless.HLGL.ShaderLogLine.WellKnownTypeWarning">
            <summary>
            The string type for the well known type warning
            </summary>
        </member>
        <member name="F:Zenseless.HLGL.ShaderLogLine.WellKnownTypeError">
            <summary>
            The string type for the well known type error
            </summary>
        </member>
        <member name="F:Zenseless.HLGL.ShaderLogLine.WellKnownTypeInfo">
            <summary>
            The string type for the well known type information
            </summary>
        </member>
        <member name="F:Zenseless.HLGL.ShaderLogLine.Type">
            <summary>
            The type
            </summary>
        </member>
        <member name="F:Zenseless.HLGL.ShaderLogLine.FileNumber">
            <summary>
            The file number
            </summary>
        </member>
        <member name="F:Zenseless.HLGL.ShaderLogLine.LineNumber">
            <summary>
            The line number
            </summary>
        </member>
        <member name="F:Zenseless.HLGL.ShaderLogLine.Message">
            <summary>
            The message
            </summary>
        </member>
        <member name="M:Zenseless.HLGL.ShaderLogLine.ToString">
            <summary>
            Returns a <see cref="T:System.String" /> that represents this instance.
            </summary>
            <returns>
            A <see cref="T:System.String" /> that represents this instance.
            </returns>
        </member>
        <member name="T:Zenseless.HLGL.ShaderLog">
            <summary>
            
            </summary>
        </member>
        <member name="M:Zenseless.HLGL.ShaderLog.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Zenseless.HLGL.ShaderLog"/> class.
            </summary>
            <param name="log">The log.</param>
        </member>
        <member name="P:Zenseless.HLGL.ShaderLog.Lines">
            <summary>
            Gets the lines.
            </summary>
            <value>
            The lines.
            </value>
        </member>
        <member name="M:Zenseless.HLGL.ShaderLog.ParseLogLine(System.String)">
            <summary>
            Parses the log line.
            </summary>
            <param name="line">The line.</param>
            <returns></returns>
            <exception cref="T:System.ArgumentException"></exception>
        </member>
        <member name="M:Zenseless.HLGL.ShaderLog.ParseLogLineNVIDIA(System.String)">
            <summary>
            Parses the log line nvidia.
            </summary>
            <param name="line">The line.</param>
            <returns></returns>
            <exception cref="T:System.ArgumentException"></exception>
        </member>
        <member name="M:Zenseless.HLGL.ShaderLog.ParseNVType(System.String)">
            <summary>
            Parses the type of the nv.
            </summary>
            <param name="v">The v.</param>
            <returns></returns>
        </member>
        <member name="M:Zenseless.HLGL.ShaderLog.ParseNVLineNumber(System.String)">
            <summary>
            Parses the nv line number.
            </summary>
            <param name="v">The v.</param>
            <returns></returns>
        </member>
        <member name="M:Zenseless.HLGL.ShaderLog.ParseNVFileNumber(System.String)">
            <summary>
            Parses the nv file number.
            </summary>
            <param name="v">The v.</param>
            <returns></returns>
        </member>
        <member name="M:Zenseless.HLGL.ShaderLog.ParseType(System.String)">
            <summary>
            Parses the type.
            </summary>
            <param name="typeString">The type string.</param>
            <returns></returns>
        </member>
        <member name="M:Zenseless.HLGL.ShaderLog.Parse(System.String)">
            <summary>
            Parses the specified number.
            </summary>
            <param name="number">The number.</param>
            <returns></returns>
        </member>
        <member name="F:Zenseless.HLGL.ShaderLog.lines">
            <summary>
            The lines
            </summary>
        </member>
        <member name="T:Zenseless.HLGL.SpriteSheet">
            <summary>
            class for grid based sprite sheets with equal sized rectangular sprites
            </summary>
        </member>
        <member name="M:Zenseless.HLGL.SpriteSheet.#ctor(Zenseless.HLGL.ITexture,System.UInt32,System.UInt32,System.Single,System.Single)">
            <summary>
            create a new instance
            </summary>
            <param name="tex">The texture.</param>
            <param name="spritesPerRow">The sprites per row.</param>
            <param name="spritesPerColumn">The sprites per column.</param>
            <param name="spriteBoundingBoxWidth">Width of the sprite bounding box.</param>
            <param name="spriteBoundingBoxHeight">Height of the sprite bounding box.</param>
        </member>
        <member name="M:Zenseless.HLGL.SpriteSheet.CalcSpriteTexCoords(System.UInt32)">
            <summary>
            Calculates texture coordinates for a given sprite id uses CalcSpriteTexCoords
            </summary>
            <param name="spriteID">number of sprite 0-based; counted from left-top</param>
            <returns>
            texture coordinates of sprite
            </returns>
        </member>
        <member name="M:Zenseless.HLGL.SpriteSheet.CalcSpriteTexCoords(System.UInt32,System.UInt32,System.UInt32,System.Single,System.Single)">
            <summary>
            Calculates texture coordinates for a given sprite id
            </summary>
            <param name="spriteID">number of sprite 0-based; counted from left-top</param>
            <param name="spritesPerRow">number of sprites per row</param>
            <param name="spritesPerColumn">number of sprites per column</param>
            <param name="spriteBoundingBoxWidth">Width of the sprite bounding box.</param>
            <param name="spriteBoundingBoxHeight">Height of the sprite bounding box.</param>
            <returns>
            texture coordinates of sprite
            </returns>
        </member>
        <member name="M:Zenseless.HLGL.SpriteSheet.Activate">
            <summary>
            Activates this instance.
            </summary>
        </member>
        <member name="M:Zenseless.HLGL.SpriteSheet.Deactivate">
            <summary>
            Deactivates this instance.
            </summary>
        </member>
        <member name="P:Zenseless.HLGL.SpriteSheet.SpriteBoundingBoxWidth">
            <summary>
            Gets the width of the sprite bounding box.
            </summary>
            <value>
            The width of the sprite bounding box.
            </value>
        </member>
        <member name="P:Zenseless.HLGL.SpriteSheet.SpriteBoundingBoxHeight">
            <summary>
            Gets the height of the sprite bounding box.
            </summary>
            <value>
            The height of the sprite bounding box.
            </value>
        </member>
        <member name="P:Zenseless.HLGL.SpriteSheet.SpritesPerRow">
            <summary>
            Gets the sprites per row.
            </summary>
            <value>
            The sprites per row.
            </value>
        </member>
        <member name="P:Zenseless.HLGL.SpriteSheet.SpritesPerColumn">
            <summary>
            Gets the sprites per column.
            </summary>
            <value>
            The sprites per column.
            </value>
        </member>
        <member name="P:Zenseless.HLGL.SpriteSheet.Tex">
            <summary>
            Gets the tex.
            </summary>
            <value>
            The tex.
            </value>
        </member>
        <member name="T:Zenseless.HLGL.IResource`1">
            <summary>
            
            </summary>
            <typeparam name="RESOURCE_TYPE">The type of the resource type.</typeparam>
        </member>
        <member name="P:Zenseless.HLGL.IResource`1.IsValueCreated">
            <summary>
            Gets a value indicating whether this instance is value created.
            </summary>
            <value>
              <c>true</c> if this instance is value created; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:Zenseless.HLGL.IResource`1.Value">
            <summary>
            Gets the value.
            </summary>
            <value>
            The value.
            </value>
        </member>
        <member name="E:Zenseless.HLGL.IResource`1.Change">
            <summary>
            Occurs when [change].
            </summary>
        </member>
        <member name="T:Zenseless.HLGL.IState">
            <summary>
            Tag as state
            </summary>
        </member>
        <member name="T:Zenseless.HLGL.ShaderPointSize">
            <summary>
            State structure for setting the point size in the shader via gl_PointSize.
            </summary>
        </member>
        <member name="M:Zenseless.HLGL.ShaderPointSize.#ctor(System.Boolean)">
            <summary>
            Initializes a new instance of the <see cref="T:Zenseless.HLGL.ShaderPointSize"/> structure.
            </summary>
            <param name="enabled">if set to <c>true</c> [enabled].</param>
        </member>
        <member name="P:Zenseless.HLGL.ShaderPointSize.Enabled">
            <summary>
            Gets a value indicating whether the <see cref="T:Zenseless.HLGL.ShaderPointSize"/> is enabled.
            </summary>
            <value>
              <c>true</c> if enabled; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="T:Zenseless.HLGL.Viewport">
            <summary>
            State of the view port rectangle.
            </summary>
        </member>
        <member name="M:Zenseless.HLGL.Viewport.#ctor(System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:Zenseless.HLGL.Viewport"/> structure.
            </summary>
            <param name="x">Specify the left corner of the view port rectangle, in pixels. The initial value is 0.</param>
            <param name="y">Specify the lower corner of the view port rectangle, in pixels. The initial value is 0.</param>
            <param name="width">Specify the width of the view port. When a GL context is first attached to a window, width and height are set to the dimensions of that window.</param>
            <param name="height">Specify the height of the view port. When a GL context is first attached to a window, width and height are set to the dimensions of that window.</param>
        </member>
        <member name="P:Zenseless.HLGL.Viewport.X">
            <summary>
            Specify the left corner of the view port rectangle, in pixels. The initial value is 0.
            </summary>
            <value>
            The x.
            </value>
        </member>
        <member name="P:Zenseless.HLGL.Viewport.Y">
            <summary>
            Specify the lower corner of the view port rectangle, in pixels. The initial value is 0.
            </summary>
            <value>
            The y.
            </value>
        </member>
        <member name="P:Zenseless.HLGL.Viewport.Width">
            <summary>
            The width of the view port.
            </summary>
            <value>
            The width of the view port.
            </value>
        </member>
        <member name="P:Zenseless.HLGL.Viewport.Height">
            <summary>
            The height of the view port. 
            </summary>
            <value>
            The height of the view port.
            </value>
        </member>
        <member name="T:Zenseless.HLGL.TextureBinding">
            <summary>
            A class for shader binding meshes with shader and textures
            </summary>
        </member>
        <member name="M:Zenseless.HLGL.TextureBinding.#ctor(System.String,Zenseless.HLGL.ITexture)">
            <summary>
            Initializes a new instance of the <see cref="T:Zenseless.HLGL.TextureBinding"/> structure.
            </summary>
            <param name="name">The name.</param>
            <param name="texture">The texture.</param>
        </member>
        <member name="P:Zenseless.HLGL.TextureBinding.Name">
            <summary>
            Gets the name.
            </summary>
            <value>
            The name.
            </value>
        </member>
        <member name="P:Zenseless.HLGL.TextureBinding.Texture">
            <summary>
            Gets the texture.
            </summary>
            <value>
            The texture.
            </value>
        </member>
    </members>
</doc>
