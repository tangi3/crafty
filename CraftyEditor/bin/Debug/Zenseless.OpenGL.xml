<?xml version="1.0"?>
<doc>
    <assembly>
        <name>Zenseless.OpenGL</name>
    </assembly>
    <members>
        <member name="T:Zenseless.OpenGL.AnimationTextures">
            <summary>
            
            </summary>
            <seealso cref="T:Zenseless.HLGL.IAnimation" />
        </member>
        <member name="M:Zenseless.OpenGL.AnimationTextures.#ctor(System.Single)">
            <summary>
            Initializes a new instance of the <see cref="T:Zenseless.OpenGL.AnimationTextures"/> class.
            </summary>
            <param name="animationLength">Length of the animation.</param>
        </member>
        <member name="M:Zenseless.OpenGL.AnimationTextures.AddFrame(Zenseless.HLGL.ITexture)">
            <summary>
            Adds the frame.
            </summary>
            <param name="textureFrame">The texture frame.</param>
        </member>
        <member name="P:Zenseless.OpenGL.AnimationTextures.AnimationLength">
            <summary>
            Gets or sets the length of the animation.
            </summary>
            <value>
            The length of the animation.
            </value>
        </member>
        <member name="P:Zenseless.OpenGL.AnimationTextures.Textures">
            <summary>
            Gets the textures.
            </summary>
            <value>
            The textures.
            </value>
        </member>
        <member name="M:Zenseless.OpenGL.AnimationTextures.CalcAnimationFrame(System.Single)">
            <summary>
            Calculates the frame id (the current frame of the animation) out of the given time
            </summary>
            <param name="time"></param>
            <returns>id of the current frame of the animation</returns>
        </member>
        <member name="M:Zenseless.OpenGL.AnimationTextures.Draw(Zenseless.Geometry.IReadOnlyBox2D,System.Single)">
            <summary>
            draws a GL quad, textured with an animation.
            </summary>
            <param name="rectangle">coordinates of the GL quad</param>
            <param name="totalSeconds">animation position in seconds</param>
        </member>
        <member name="T:Zenseless.OpenGL.ColorSystems">
            <summary>
            Class for color system transformations
            </summary>
        </member>
        <member name="M:Zenseless.OpenGL.ColorSystems.Hsb2rgb(System.Single,System.Single,System.Single)">
            <summary>
            Converts HSB (Hue, Saturation and Brightness) color value into RGB
            </summary>
            <param name="hue">Hue [0..1]</param>
            <param name="saturation">Saturation [0..1]</param>
            <param name="brightness">Brightness [0..1]</param>
            <returns>
            RGB color
            </returns>
        </member>
        <member name="M:Zenseless.OpenGL.ColorSystems.ToSystemColor(System.Numerics.Vector3)">
            <summary>
            To the color of the system.
            </summary>
            <param name="color">The color.</param>
            <returns></returns>
        </member>
        <member name="M:Zenseless.OpenGL.ColorSystems.ToVector3(System.Drawing.Color)">
            <summary>
            To the vector3.
            </summary>
            <param name="color">The color.</param>
            <returns></returns>
        </member>
        <member name="T:Zenseless.OpenGL.BufferObject">
            <summary>
            A class that encapsulates an OpenGL buffer object.
            </summary>
            <seealso cref="T:Zenseless.Patterns.Disposable" />
        </member>
        <member name="M:Zenseless.OpenGL.BufferObject.#ctor(OpenTK.Graphics.OpenGL4.BufferTarget)">
            <summary>
            Initializes a new instance of the <see cref="T:Zenseless.OpenGL.BufferObject"/> class.
            </summary>
            <param name="bufferTarget">The buffer target.</param>
        </member>
        <member name="P:Zenseless.OpenGL.BufferObject.BufferTarget">
            <summary>
            Gets the buffer target.
            </summary>
            <value>
            The buffer target.
            </value>
        </member>
        <member name="P:Zenseless.OpenGL.BufferObject.Type">
            <summary>
            Gets the type.
            </summary>
            <value>
            The type.
            </value>
        </member>
        <member name="M:Zenseless.OpenGL.BufferObject.Activate">
            <summary>
            Activates this instance.
            </summary>
        </member>
        <member name="M:Zenseless.OpenGL.BufferObject.ActivateBind(System.Int32)">
            <summary>
            Activates the bind.
            </summary>
            <param name="index">The index.</param>
        </member>
        <member name="M:Zenseless.OpenGL.BufferObject.Deactivate">
            <summary>
            Deactivates this instance.
            </summary>
        </member>
        <member name="M:Zenseless.OpenGL.BufferObject.Set``1(``0[],OpenTK.Graphics.OpenGL4.BufferUsageHint)">
            <summary>
            Sets the specified data.
            </summary>
            <typeparam name="DATA_ELEMENT_TYPE">The type of the ata element type.</typeparam>
            <param name="data">The data.</param>
            <param name="usageHint">The usage hint.</param>
        </member>
        <member name="M:Zenseless.OpenGL.BufferObject.Set(System.IntPtr,System.Int32,OpenTK.Graphics.OpenGL4.BufferUsageHint)">
            <summary>
            Sets the specified data.
            </summary>
            <param name="data">The data.</param>
            <param name="bufferByteSize">Size of the buffer byte.</param>
            <param name="usageHint">The usage hint.</param>
        </member>
        <member name="M:Zenseless.OpenGL.BufferObject.Set``1(``0,OpenTK.Graphics.OpenGL4.BufferUsageHint)">
            <summary>
            Sets the specified data.
            </summary>
            <typeparam name="DATA_TYPE">The type of the ata type.</typeparam>
            <param name="data">The data.</param>
            <param name="usageHint">The usage hint.</param>
        </member>
        <member name="M:Zenseless.OpenGL.BufferObject.DisposeResources">
            <summary>
            Will be called from the default Dispose method.
            </summary>
        </member>
        <member name="T:Zenseless.OpenGL.ContentManagerGL">
            <summary>
            Creates a content manager that creates OpenGL object instances, like textures, shaders
            </summary>
        </member>
        <member name="M:Zenseless.OpenGL.ContentManagerGL.Create(System.Reflection.Assembly,System.Boolean)">
            <summary>
            Creates a content manager that creates OpenGL object instances, like textures
            </summary>
            <param name="resourceAssembly">The assembly that contains the resources.</param>
            <param name="solutionMode">Should shaders be built with solution on or off</param>
            <returns>A content manager instance</returns>
        </member>
        <member name="M:Zenseless.OpenGL.ContentManagerGL.GetShaderTypeFromExtension(System.String)">
            <summary>
            Gets the shader type from file extension.
            </summary>
            <param name="extension">The file extension.</param>
            <returns>the shader type</returns>
            <exception cref="T:System.ArgumentException"></exception>
        </member>
        <member name="T:Zenseless.OpenGL.DebuggerGL">
            <summary>
            A debugger for OpenGL needs an OpenGL context created with the debug flag
            </summary>
        </member>
        <member name="M:Zenseless.OpenGL.DebuggerGL.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Zenseless.OpenGL.DebuggerGL"/> class.
            </summary>
        </member>
        <member name="T:Zenseless.OpenGL.DrawableGL">
            <summary>
            
            </summary>
        </member>
        <member name="M:Zenseless.OpenGL.DrawableGL.CreateDrawCallGL(OpenTK.Graphics.OpenGL4.PrimitiveType,System.Int32,System.Int32,Zenseless.OpenGL.VAO)">
            <summary>
            Creates the draw call gl.
            </summary>
            <param name="primitiveType">Type of the primitive.</param>
            <param name="elementCount">The element count.</param>
            <param name="instanceCount">The instance count.</param>
            <param name="vao">The vao.</param>
            <returns></returns>
        </member>
        <member name="M:Zenseless.OpenGL.DrawableGL.CreateIndexedDrawCallGL(OpenTK.Graphics.OpenGL4.PrimitiveType,OpenTK.Graphics.OpenGL4.DrawElementsType,System.Int32,System.Int32,Zenseless.OpenGL.VAO)">
            <summary>
            Creates the indexed draw call gl.
            </summary>
            <param name="primitiveType">Type of the primitive.</param>
            <param name="drawElementsType">Type of the draw elements.</param>
            <param name="idCount">The identifier count.</param>
            <param name="instanceCount">The instance count.</param>
            <param name="vao">The vao.</param>
            <returns></returns>
        </member>
        <member name="T:Zenseless.OpenGL.FBOException">
            <summary>
            Implements an FBO exception.
            </summary>
            <seealso cref="T:Zenseless.OpenGL.GLException" />
        </member>
        <member name="M:Zenseless.OpenGL.FBOException.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Zenseless.OpenGL.FBOException" /> class.
            </summary>
            <param name="message">The error message.</param>
        </member>
        <member name="T:Zenseless.OpenGL.GLException">
            <summary>
            Implements a base GL exception.
            </summary>
            <seealso cref="T:System.Exception" />
        </member>
        <member name="M:Zenseless.OpenGL.GLException.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Zenseless.OpenGL.GLException" /> class.
            </summary>
            <param name="message">The error message.</param>
        </member>
        <member name="T:Zenseless.OpenGL.FrameGrabber">
            <summary>
            Each frame will be saved into a <seealso cref="T:System.Drawing.Bitmap"/>. Can be used to create videos.
            </summary>
            <seealso cref="T:Zenseless.Patterns.Disposable" />
            <seealso cref="T:Zenseless.HLGL.IAfterRendering" />
        </member>
        <member name="M:Zenseless.OpenGL.FrameGrabber.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Zenseless.OpenGL.FrameGrabber"/> class.
            </summary>
        </member>
        <member name="M:Zenseless.OpenGL.FrameGrabber.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Zenseless.OpenGL.FrameGrabber"/> class.
            </summary>
            <param name="destinationDirectory">The destination directory.</param>
        </member>
        <member name="M:Zenseless.OpenGL.FrameGrabber.AfterRendering">
            <summary>
            Will be called once a frame on rendering, but before the buffer swap.
            </summary>
        </member>
        <member name="P:Zenseless.OpenGL.FrameGrabber.Frames">
            <summary>
            Gets the list of captured frames.
            </summary>
            <value>
            The <seealso cref="T:System.Collections.Generic.IReadOnlyList`1"/> of frames.
            </value>
        </member>
        <member name="P:Zenseless.OpenGL.FrameGrabber.DestinationDirectory">
            <summary>
            Gets the destination directory for saving the captured frames.
            </summary>
            <value>
            The destination directory.
            </value>
        </member>
        <member name="M:Zenseless.OpenGL.FrameGrabber.DisposeResources">
            <summary>
            Will be called from the default Dispose method.
            Implementers should dispose all their resources her.
            </summary>
        </member>
        <member name="T:Zenseless.OpenGL.ImageListTools">
            <summary>
            Contains tools for saving image lists. 
            Intended to be used for recording of videos. Is used in ExampleWindow.
            </summary>
        </member>
        <member name="M:Zenseless.OpenGL.ImageListTools.Save(System.Collections.Generic.IEnumerable{System.Drawing.Bitmap},System.String)">
            <summary>
            Save a list of images to a given directory.
            </summary>
            <param name="images">Images to save</param>
            <param name="directory">Directory to save to</param>
        </member>
        <member name="M:Zenseless.OpenGL.ImageListTools.ToBuffer(System.Drawing.Bitmap)">
            <summary>
            Converts a <see cref="T:System.Drawing.Bitmap"/> into a byte buffer.
            </summary>
            <param name="bitmap">The bitmap to convert.</param>
            <returns><see cref="T:System.Byte"/>[]</returns>
        </member>
        <member name="T:Zenseless.OpenGL.INativeWindowExtensions">
            <summary>
            Extension method class for OpenTK.INativeWindow
            </summary>
        </member>
        <member name="M:Zenseless.OpenGL.INativeWindowExtensions.AddWindowAspectHandling(OpenTK.INativeWindow,Zenseless.Geometry.Perspective)">
            <summary>
            Registered a perspective Transformation that will react on aspect changes of the window.
            </summary>
            <param name="window">The window.</param>
            <param name="projection">The projection.</param>
        </member>
        <member name="M:Zenseless.OpenGL.INativeWindowExtensions.AddMayaCameraEvents(OpenTK.INativeWindow,Zenseless.Geometry.Perspective,Zenseless.Geometry.Orbit)">
            <summary>
            Add Maya like camera handling for orbiting camera. 
            </summary>
            <param name="window">window that receives input system events</param>
            <param name="projection">Projection transformation.</param>
            <param name="orbit">Orbit transformation.</param>
        </member>
        <member name="T:Zenseless.OpenGL.INativeWindowExtensions.FirstPersonMovementState">
            <summary>
            
            </summary>
        </member>
        <member name="F:Zenseless.OpenGL.INativeWindowExtensions.FirstPersonMovementState.movement">
            <summary>
            delta movement since
            </summary>
        </member>
        <member name="M:Zenseless.OpenGL.INativeWindowExtensions.AddFirstPersonCameraEvents(OpenTK.INativeWindow,Zenseless.Geometry.FirstPerson)">
            <summary>
            Add first person camera controller. 
            </summary>
            <param name="window">window that receives input system events</param>
            <param name="firstPerson">The first person transform.</param>
        </member>
        <member name="M:Zenseless.OpenGL.INativeWindowExtensions.CreateOrbitingCameraController(OpenTK.INativeWindow,System.Single,System.Single,System.Single,System.Single)">
            <summary>
            Creates an orbiting camera controller.
            </summary>
            <param name="window">The window were the event handlers should be registered.</param>
            <param name="distance">The distance.</param>
            <param name="fieldOfViewY">The field-of-view in y-direction.</param>
            <param name="nearClip">The near clip plane distance.</param>
            <param name="farClip">The far clip plane distance.</param>
            <returns></returns>
        </member>
        <member name="M:Zenseless.OpenGL.INativeWindowExtensions.DefaultExampleWindowKeyEvents(System.Object,OpenTK.Input.KeyboardKeyEventArgs)">
            <summary>
            Default key bindings: ESCAPE for closing; F11 for toggling full-screen
            </summary>
            <param name="sender">window that receives input system events. Should be a <see cref="T:OpenTK.INativeWindow"/>.</param>
            <param name="e">The <see cref="T:OpenTK.Input.KeyboardKeyEventArgs"/> instance containing the event data.</param>
        </member>
        <member name="M:Zenseless.OpenGL.INativeWindowExtensions.ConvertWindowPixelCoords(OpenTK.INativeWindow,System.Int32,System.Int32)">
            <summary>
            Converts pixel based coordinates to coordinates in range [-1,1]²
            </summary>
            <param name="window">window for which to convert the coordinates</param>
            <param name="pixelX">Window pixel x-coordinate</param>
            <param name="pixelY">Window pixel y-coordinate</param>
            <returns>Coordinates in range [-1,1]²</returns>
        </member>
        <member name="T:Zenseless.OpenGL.MeshVisual">
            <summary>
            
            </summary>
        </member>
        <member name="M:Zenseless.OpenGL.MeshVisual.#ctor(Zenseless.Geometry.DefaultMesh,Zenseless.HLGL.IShaderProgram,System.Collections.Generic.IEnumerable{Zenseless.HLGL.TextureBinding})">
            <summary>
            Initializes a new instance of the <see cref="T:Zenseless.OpenGL.MeshVisual"/> class.
            </summary>
            <param name="mesh">The mesh.</param>
            <param name="shader">The shader.</param>
            <param name="textureBindings">The texture bindings.</param>
        </member>
        <member name="M:Zenseless.OpenGL.MeshVisual.#ctor(Zenseless.HLGL.IDrawable,Zenseless.HLGL.IShaderProgram,System.Collections.Generic.IEnumerable{Zenseless.HLGL.TextureBinding})">
            <summary>
            Initializes a new instance of the <see cref="T:Zenseless.OpenGL.MeshVisual"/> class.
            </summary>
            <param name="drawable"></param>
            <param name="shader">The shader.</param>
            <param name="textureBindings">The texture bindings.</param>
        </member>
        <member name="P:Zenseless.OpenGL.MeshVisual.Drawable">
            <summary>
            Gets the drawable.
            </summary>
            <value>
            The drawable.
            </value>
        </member>
        <member name="P:Zenseless.OpenGL.MeshVisual.ShaderProgram">
            <summary>
            Gets the shader program.
            </summary>
            <value>
            The shader program.
            </value>
        </member>
        <member name="P:Zenseless.OpenGL.MeshVisual.TextureBindings">
            <summary>
            Gets the texture bindings.
            </summary>
            <value>
            The texture bindings.
            </value>
        </member>
        <member name="M:Zenseless.OpenGL.MeshVisual.SetUniform(Zenseless.HLGL.IUniform)">
            <summary>
            Sets an uniform persistently. It will be updated each time the visual is drawn.
            </summary>
        </member>
        <member name="M:Zenseless.OpenGL.MeshVisual.Draw">
            <summary>
            Draws this instance.
            </summary>
        </member>
        <member name="T:Zenseless.OpenGL.RenderContextGL">
            <summary>
            
            </summary>
            <seealso cref="T:Zenseless.HLGL.IRenderContext" />
        </member>
        <member name="M:Zenseless.OpenGL.RenderContextGL.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Zenseless.OpenGL.RenderContextGL"/> class.
            </summary>
        </member>
        <member name="P:Zenseless.OpenGL.RenderContextGL.RenderState">
            <summary>
            Gets the state of the render.
            </summary>
            <value>
            The state of the render.
            </value>
        </member>
        <member name="M:Zenseless.OpenGL.RenderContextGL.GetFrameBuffer">
            <summary>
            Gets the frame buffer.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Zenseless.OpenGL.RenderContextGL.CreateRenderSurface(System.Int32,System.Int32,System.Boolean,System.Byte,System.Boolean)">
            <summary>
            Creates the render surface.
            </summary>
            <param name="width">The width.</param>
            <param name="height">The height.</param>
            <param name="hasDepthBuffer">if set to <c>true</c> [has depth buffer].</param>
            <param name="components">The components.</param>
            <param name="floatingPoint">if set to <c>true</c> [floating point].</param>
            <returns></returns>
        </member>
        <member name="T:Zenseless.OpenGL.FBOwithDepth">
            <summary>
            
            </summary>
            <seealso cref="T:Zenseless.OpenGL.FBO" />
        </member>
        <member name="M:Zenseless.OpenGL.FBOwithDepth.#ctor(Zenseless.HLGL.ITexture2D)">
            <summary>
            Initializes a new instance of the <see cref="T:Zenseless.OpenGL.FBOwithDepth"/> class.
            </summary>
            <param name="texture">The texture.</param>
        </member>
        <member name="M:Zenseless.OpenGL.FBOwithDepth.DisposeResources">
            <summary>
            Will be called from the default Dispose method.
            </summary>
        </member>
        <member name="T:Zenseless.OpenGL.DrawTools">
            <summary>
            
            </summary>
        </member>
        <member name="M:Zenseless.OpenGL.DrawTools.DrawCircle(System.Single,System.Single,System.Single,System.Int32,System.Boolean)">
            <summary>
            Draws a circle. This is a slow immediate mode helper function.
            </summary>
            <param name="centerX">The center x.</param>
            <param name="centerY">The center y.</param>
            <param name="radius">The radius.</param>
            <param name="corners">The segments.</param>
            <param name="isFilled">Filled or border</param>
        </member>
        <member name="M:Zenseless.OpenGL.DrawTools.DrawTexturedRect(Zenseless.Geometry.IReadOnlyBox2D,Zenseless.Geometry.IReadOnlyBox2D)">
            <summary>
            Draws a textured rectangle.
            </summary>
            <param name="rect">The rectangle coordinates.</param>
            <param name="texCoords">The rectangle texture coordinates.</param>
        </member>
        <member name="M:Zenseless.OpenGL.DrawTools.Uniform(Zenseless.HLGL.IShaderProgram,System.String,System.Drawing.Color)">
            <summary>
            Set color Uniform on active shader. The correct shader has to be activated first!
            </summary>
            <param name="shaderProgram">The shader program.</param>
            <param name="name">The uniform variable name.</param>
            <param name="color">The color.</param>
        </member>
        <member name="M:Zenseless.OpenGL.DrawTools.BindTextures(Zenseless.HLGL.IShaderProgram,System.Collections.Generic.IEnumerable{Zenseless.HLGL.TextureBinding})">
            <summary>
            Binds the textures to texture units and to a given shader program.
            </summary>
            <param name="shaderProgram">The shader program.</param>
            <param name="textureBindings">The texture bindings.</param>
        </member>
        <member name="M:Zenseless.OpenGL.DrawTools.UnbindTextures(System.Collections.Generic.IEnumerable{Zenseless.HLGL.TextureBinding})">
            <summary>
            Unbinds the textures from all texture units.
            </summary>
            <param name="textureBindings">The texture bindings.</param>
        </member>
        <member name="T:Zenseless.OpenGL.RenderStateGL">
            <summary>
            
            </summary>
        </member>
        <member name="M:Zenseless.OpenGL.RenderStateGL.Create">
            <summary>
            Creates this instance.
            </summary>
            <returns></returns>
        </member>
        <member name="T:Zenseless.OpenGL.RenderSurfaceGL">
            <summary>
            
            </summary>
            <seealso cref="T:Zenseless.Patterns.Disposable" />
            <seealso cref="T:Zenseless.HLGL.IOldRenderSurface" />
        </member>
        <member name="M:Zenseless.OpenGL.RenderSurfaceGL.#ctor(System.Int32,System.Int32,System.Boolean,System.Byte,System.Boolean)">
            <summary>
            Initializes a new instance of the <see cref="T:Zenseless.OpenGL.RenderSurfaceGL"/> class.
            </summary>
            <param name="width">The width.</param>
            <param name="height">The height.</param>
            <param name="hasDepthBuffer">if set to <c>true</c> [has depth buffer].</param>
            <param name="components">The components.</param>
            <param name="floatingPoint">if set to <c>true</c> [floating point].</param>
        </member>
        <member name="M:Zenseless.OpenGL.RenderSurfaceGL.#ctor(System.Boolean)">
            <summary>
            Initializes a new instance of the <see cref="T:Zenseless.OpenGL.RenderSurfaceGL"/> class.
            </summary>
            <param name="hasDepthBuffer">if set to <c>true</c> [has depth buffer].</param>
        </member>
        <member name="P:Zenseless.OpenGL.RenderSurfaceGL.Texture">
            <summary>
            Gets the texture.
            </summary>
            <value>
            The texture.
            </value>
        </member>
        <member name="M:Zenseless.OpenGL.RenderSurfaceGL.Clear">
            <summary>
            Clears this instance.
            </summary>
        </member>
        <member name="M:Zenseless.OpenGL.RenderSurfaceGL.Draw(Zenseless.HLGL.IDrawConfiguration)">
            <summary>
            Draws the specified configuration.
            </summary>
            <param name="config">The configuration.</param>
        </member>
        <member name="M:Zenseless.OpenGL.RenderSurfaceGL.DisposeResources">
            <summary>
            Will be called from the default Dispose method.
            </summary>
        </member>
        <member name="F:Zenseless.OpenGL.RenderSurfaceGL.fbo">
            <summary>
            The fbo
            </summary>
        </member>
        <member name="F:Zenseless.OpenGL.RenderSurfaceGL.actionClear">
            <summary>
            The action clear
            </summary>
        </member>
        <member name="F:Zenseless.OpenGL.RenderSurfaceGL.context">
            <summary>
            The context
            </summary>
        </member>
        <member name="T:Zenseless.OpenGL.QueryObject">
            <summary>
            
            </summary>
            <seealso cref="T:Zenseless.Patterns.Disposable" />
        </member>
        <member name="M:Zenseless.OpenGL.QueryObject.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Zenseless.OpenGL.QueryObject"/> class.
            </summary>
        </member>
        <member name="M:Zenseless.OpenGL.QueryObject.Activate(OpenTK.Graphics.OpenGL4.QueryTarget)">
            <summary>
            Activates the specified target.
            </summary>
            <param name="target">The target.</param>
        </member>
        <member name="M:Zenseless.OpenGL.QueryObject.Deactivate">
            <summary>
            Deactivates this instance.
            </summary>
        </member>
        <member name="P:Zenseless.OpenGL.QueryObject.IsFinished">
            <summary>
            Gets a value indicating whether this instance is finished.
            </summary>
            <value>
              <c>true</c> if this instance is finished; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:Zenseless.OpenGL.QueryObject.Result">
            <summary>
            Gets the result.
            </summary>
            <value>
            The result.
            </value>
        </member>
        <member name="P:Zenseless.OpenGL.QueryObject.ResultLong">
            <summary>
            Gets the result long.
            </summary>
            <value>
            The result long.
            </value>
        </member>
        <member name="P:Zenseless.OpenGL.QueryObject.Target">
            <summary>
            Gets the target.
            </summary>
            <value>
            The target.
            </value>
        </member>
        <member name="M:Zenseless.OpenGL.QueryObject.TryGetResult(System.Int32@)">
            <summary>
            Tries the get result.
            </summary>
            <param name="result">The result.</param>
            <returns></returns>
        </member>
        <member name="M:Zenseless.OpenGL.QueryObject.TryGetResult(System.Int64@)">
            <summary>
            Tries the get result.
            </summary>
            <param name="result">The result.</param>
            <returns></returns>
        </member>
        <member name="M:Zenseless.OpenGL.QueryObject.DisposeResources">
            <summary>
            Will be called from the default Dispose method.
            </summary>
        </member>
        <member name="F:Zenseless.OpenGL.QueryObject.id">
            <summary>
            The identifier
            </summary>
        </member>
        <member name="T:Zenseless.OpenGL.FrameBuffer">
            <summary>
            Contains methods for accessing the frame buffer 
            </summary>
        </member>
        <member name="M:Zenseless.OpenGL.FrameBuffer.RotateFlip(System.Drawing.Bitmap)">
            <summary>
            Do the necessary rotate and flip for GL buffer to <seealso cref="T:System.Drawing.Bitmap"/> conversion.
            </summary>
            <param name="bitmap">The bitmap that will be rotated and flipped</param>
        </member>
        <member name="M:Zenseless.OpenGL.FrameBuffer.ToBitmap(System.Int32,System.Int32,System.Int32,System.Int32,System.Boolean)">
            <summary>
            Saves a rectangular area of the current frame buffer into a Bitmap
            </summary>
            <param name="x">start position in x-direction</param>
            <param name="y">start position in y-direction</param>
            <param name="width">size in x-direction</param>
            <param name="height">size in y-direction</param>
            <param name="rotateFlip">If <code>true</code> image will be rotated and flipped, which is correct,
            but this is a time-consuming operation and should be switched off for fast screen capturing.
            <code>true</code> by default.</param>
            <returns>Bitmap</returns>
        </member>
        <member name="M:Zenseless.OpenGL.FrameBuffer.ToBitmap(System.Boolean)">
            <summary>
            Saves the contents of the current frame buffer into a Bitmap
            </summary>
            <param name="rotateFlip">If <code>true</code> image will be rotated and flipped, which is correct,
            but this is a time-consuming operation and should be switched off for fast screen capturing.
            <code>true</code> by default.</param>
            <returns>Bitmap</returns>
        </member>
        <member name="T:Zenseless.OpenGL.RenderBuffer">
            <summary>
            
            </summary>
            <seealso cref="T:Zenseless.Patterns.Disposable" />
        </member>
        <member name="P:Zenseless.OpenGL.RenderBuffer.Handle">
            <summary>
            Gets the handle.
            </summary>
            <value>
            The handle.
            </value>
        </member>
        <member name="M:Zenseless.OpenGL.RenderBuffer.#ctor(OpenTK.Graphics.OpenGL4.RenderbufferStorage,System.Int32,System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:Zenseless.OpenGL.RenderBuffer"/> class.
            </summary>
            <param name="type">The type.</param>
            <param name="width">The width.</param>
            <param name="height">The height.</param>
        </member>
        <member name="M:Zenseless.OpenGL.RenderBuffer.Activate">
            <summary>
            Activates this instance.
            </summary>
        </member>
        <member name="M:Zenseless.OpenGL.RenderBuffer.Attach(OpenTK.Graphics.OpenGL4.FramebufferAttachment)">
            <summary>
            Attaches the specified attachment point.
            </summary>
            <param name="attachmentPoint">The attachment point.</param>
        </member>
        <member name="M:Zenseless.OpenGL.RenderBuffer.Deactivate">
            <summary>
            Deactivates this instance.
            </summary>
        </member>
        <member name="M:Zenseless.OpenGL.RenderBuffer.DisposeResources">
            <summary>
            Will be called from the default Dispose method.
            </summary>
        </member>
        <member name="T:Zenseless.OpenGL.ShaderGL">
            <summary>
            OpenGL shader class
            </summary>
            <seealso cref="T:Zenseless.Patterns.Disposable" />
        </member>
        <member name="M:Zenseless.OpenGL.ShaderGL.#ctor(Zenseless.HLGL.ShaderType)">
            <summary>
            Initializes a new instance of the <see cref="T:Zenseless.OpenGL.ShaderGL"/> class.
            </summary>
            <param name="shaderType">Type of the shader.</param>
            <exception cref="T:Zenseless.HLGL.ShaderException">Could not create " + shaderType.ToString() + " instance.</exception>
        </member>
        <member name="M:Zenseless.OpenGL.ShaderGL.Compile(System.String)">
            <summary>
            Compiles the specified source code.
            </summary>
            <param name="sourceCode">The source code.</param>
            <returns></returns>
        </member>
        <member name="P:Zenseless.OpenGL.ShaderGL.Log">
            <summary>
            Gets the last shader [compilation] log.
            </summary>
            <value>
            The log string.
            </value>
        </member>
        <member name="P:Zenseless.OpenGL.ShaderGL.ShaderID">
            <summary>
            Gets the OpenGL shader identifier.
            </summary>
            <value>
            The shader identifier.
            </value>
        </member>
        <member name="P:Zenseless.OpenGL.ShaderGL.ShaderType">
            <summary>
            Gets the type of the shader.
            </summary>
            <value>
            The type of the shader.
            </value>
        </member>
        <member name="M:Zenseless.OpenGL.ShaderGL.DisposeResources">
            <summary>
            Will be called from the default Dispose method.
            Implementers should dispose all their resources her.
            </summary>
        </member>
        <member name="T:Zenseless.OpenGL.SpriteSheetAnimation">
            <summary>
            
            </summary>
            <seealso cref="T:Zenseless.HLGL.IAnimation" />
        </member>
        <member name="M:Zenseless.OpenGL.SpriteSheetAnimation.#ctor(Zenseless.HLGL.SpriteSheet,System.UInt32,System.UInt32,System.Single)">
            <summary>
            Initializes a new instance of the <see cref="T:Zenseless.OpenGL.SpriteSheetAnimation"/> class.
            </summary>
            <param name="spriteSheet">The sprite sheet.</param>
            <param name="fromID">From identifier.</param>
            <param name="toID">To identifier.</param>
            <param name="animationLength">Length of the animation.</param>
        </member>
        <member name="P:Zenseless.OpenGL.SpriteSheetAnimation.AnimationLength">
            <summary>
            Gets or sets the length of the animation.
            </summary>
            <value>
            The length of the animation.
            </value>
        </member>
        <member name="P:Zenseless.OpenGL.SpriteSheetAnimation.FromID">
            <summary>
            Gets or sets from identifier.
            </summary>
            <value>
            From identifier.
            </value>
        </member>
        <member name="P:Zenseless.OpenGL.SpriteSheetAnimation.SpriteSheet">
            <summary>
            Gets the sprite sheet.
            </summary>
            <value>
            The sprite sheet.
            </value>
        </member>
        <member name="P:Zenseless.OpenGL.SpriteSheetAnimation.ToID">
            <summary>
            Gets or sets to identifier.
            </summary>
            <value>
            To identifier.
            </value>
        </member>
        <member name="M:Zenseless.OpenGL.SpriteSheetAnimation.CalcAnimationSpriteID(System.UInt32,System.UInt32,System.Single,System.Single)">
            <summary>
            Calculates the sprite id (the current frame of the animation) out of the given time
            </summary>
            <param name="fromID">sprite id for first animation frame</param>
            <param name="toID">sprite id for last animation frame</param>
            <param name="animationLength">total animation time in seconds</param>
            <param name="time">current time</param>
            <returns>
            sprite id of the current frame of the animation
            </returns>
        </member>
        <member name="M:Zenseless.OpenGL.SpriteSheetAnimation.Draw(Zenseless.Geometry.IReadOnlyBox2D,System.Single)">
            <summary>
            draws a GL quad, textured with an animation.
            </summary>
            <param name="rectangle">coordinates ofthe GL quad</param>
            <param name="totalSeconds">animation position in seconds</param>
        </member>
        <member name="T:Zenseless.OpenGL.FBO">
            <summary>
            Frame buffer object class that handles rendering to texture(s).
            </summary>
            <seealso cref="T:Zenseless.Patterns.Disposable" />
        </member>
        <member name="M:Zenseless.OpenGL.FBO.#ctor(Zenseless.HLGL.ITexture2D)">
            <summary>
            Initializes a new instance of the <see cref="T:Zenseless.OpenGL.FBO"/> class.
            </summary>
            <param name="texture">The texture to draw to. The FBO will try to dispose the texture when the FBO is disposed.</param>
            <exception cref="T:Zenseless.OpenGL.FBOException">
            Given texture is null or texture dimensions do not match primary texture
            </exception>
        </member>
        <member name="M:Zenseless.OpenGL.FBO.Attach(Zenseless.HLGL.ITexture2D)">
            <summary>
            Attaches the specified texture. The FBO will try to dispose the texture when the FBO is disposed.
            </summary>
            <param name="texture">The texture to attach.</param>
            <exception cref="T:Zenseless.OpenGL.FBOException">
            Given texture is null or texture dimensions do not match primary texture
            </exception>
        </member>
        <member name="P:Zenseless.OpenGL.FBO.Texture">
            <summary>
            Gets the texture.
            </summary>
            <value>
            The texture.
            </value>
        </member>
        <member name="P:Zenseless.OpenGL.FBO.Textures">
            <summary>
            Gets the list of attached textures.
            </summary>
            <value>
            The list of textures.
            </value>
        </member>
        <member name="M:Zenseless.OpenGL.FBO.Activate">
            <summary>
            Activates this instance.
            </summary>
        </member>
        <member name="M:Zenseless.OpenGL.FBO.Deactivate">
            <summary>
            Deactivates this instance.
            </summary>
        </member>
        <member name="M:Zenseless.OpenGL.FBO.Draw(System.Action)">
            <summary>
            Draws the specified draw code onto the render surface.
            </summary>
            <param name="drawCode">The draw code.</param>
        </member>
        <member name="M:Zenseless.OpenGL.FBO.DisposeResources">
            <summary>
            Will be called from the default Dispose method.
            </summary>
        </member>
        <member name="T:Zenseless.OpenGL.ShaderProgramGL">
            <summary>
            OpenGL shader program class
            </summary>
            <seealso cref="T:Zenseless.Patterns.Disposable" />
            <seealso cref="T:Zenseless.HLGL.IShaderProgram" />
        </member>
        <member name="P:Zenseless.OpenGL.ShaderProgramGL.ProgramID">
            <summary>
            Gets the program identifier.
            </summary>
            <value>
            The program identifier.
            </value>
        </member>
        <member name="P:Zenseless.OpenGL.ShaderProgramGL.Log">
            <summary>
            Gets the shader log.
            </summary>
            <value>
            The log.
            </value>
        </member>
        <member name="M:Zenseless.OpenGL.ShaderProgramGL.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Zenseless.OpenGL.ShaderProgramGL" /> class.
            </summary>
        </member>
        <member name="M:Zenseless.OpenGL.ShaderProgramGL.Attach(Zenseless.OpenGL.ShaderGL)">
            <summary>
            Attaches the specified shader.
            </summary>
            <param name="shader">The shader.</param>
        </member>
        <member name="M:Zenseless.OpenGL.ShaderProgramGL.Activate">
            <summary>
            Begins this shader use.
            </summary>
        </member>
        <member name="M:Zenseless.OpenGL.ShaderProgramGL.Deactivate">
            <summary>
            Ends this shader use.
            </summary>
        </member>
        <member name="M:Zenseless.OpenGL.ShaderProgramGL.GetResourceLocation(Zenseless.HLGL.ShaderResourceType,System.String)">
            <summary>
            Gets the resource location.
            </summary>
            <param name="resourceType">Type of the resource.</param>
            <param name="name">The name.</param>
            <returns></returns>
            <exception cref="T:System.ArgumentOutOfRangeException">Unknown ShaderResourceType</exception>
        </member>
        <member name="M:Zenseless.OpenGL.ShaderProgramGL.Link">
            <summary>
            Links all compiled shaders to a shader program and deletes them.
            </summary>
            <returns></returns>
            <exception cref="T:Zenseless.HLGL.ShaderLinkException"></exception>
        </member>
        <member name="M:Zenseless.OpenGL.ShaderProgramGL.Uniform(System.String,System.Int32)">
            <summary>
            Set int Uniform on active shader.
            </summary>
            <param name="name">The uniform variable name.</param>
            <param name="value">The value to set.</param>
            <exception cref="T:System.NotImplementedException"></exception>
        </member>
        <member name="M:Zenseless.OpenGL.ShaderProgramGL.Uniform(System.String,System.Single)">
            <summary>
            Set float Uniform on active shader.
            </summary>
            <param name="name">The uniform variable name.</param>
            <param name="value">The value to set.</param>
        </member>
        <member name="M:Zenseless.OpenGL.ShaderProgramGL.Uniform(System.String,System.Numerics.Vector2@)">
            <summary>
            Set Vector2 Uniform on active shader.
            </summary>
            <param name="name">The uniform variable name.</param>
            <param name="vector">The vector.</param>
        </member>
        <member name="M:Zenseless.OpenGL.ShaderProgramGL.Uniform(System.Int32,System.Numerics.Vector3@)">
            <summary>
            Set Vector3 Uniform on active shader.
            </summary>
            <param name="location">The shader variable location.</param>
            <param name="vector">The vector.</param>
        </member>
        <member name="M:Zenseless.OpenGL.ShaderProgramGL.Uniform(System.String,System.Numerics.Vector3@)">
            <summary>
            Set Vector3 Uniform on active shader.
            </summary>
            <param name="name">The uniform variable name.</param>
            <param name="vector">The vector.</param>
        </member>
        <member name="M:Zenseless.OpenGL.ShaderProgramGL.Uniform(System.String,System.Numerics.Vector4@)">
            <summary>
            Set Vector4 Uniform on active shader.
            </summary>
            <param name="name">The uniform variable name.</param>
            <param name="vector">The vector.</param>
        </member>
        <member name="M:Zenseless.OpenGL.ShaderProgramGL.Uniform(System.Int32,System.Numerics.Matrix4x4@,System.Boolean)">
            <summary>
            Set matrix uniforms on active shader.
            </summary>
            <param name="location">The shader variable location.</param>
            <param name="matrix">The input matrix.</param>
            <param name="transpose">if set to <c>true</c> the matrix is transposed.</param>
        </member>
        <member name="M:Zenseless.OpenGL.ShaderProgramGL.Uniform(System.String,System.Numerics.Matrix4x4@,System.Boolean)">
            <summary>
            Set matrix uniforms on shader on active shader.
            </summary>
            <param name="name">The uniform variable name.</param>
            <param name="matrix">The input matrix.</param>
            <param name="transpose">if set to <c>true</c> the matrix is transposed.</param>
        </member>
        <member name="M:Zenseless.OpenGL.ShaderProgramGL.DisposeResources">
            <summary>
            Will be called from the default Dispose method.
            </summary>
        </member>
        <member name="F:Zenseless.OpenGL.ShaderProgramGL.shaders">
            <summary>
            The shader ids used for linking
            </summary>
        </member>
        <member name="M:Zenseless.OpenGL.ShaderProgramGL.RemoveShaders">
            <summary>
            Removes all attached shaders.
            </summary>
        </member>
        <member name="T:Zenseless.OpenGL.ShaderLoader">
            <summary>
            Contains methods for loading Glsl Shader programs from files, streams or strings
            </summary>
        </member>
        <member name="M:Zenseless.OpenGL.ShaderLoader.CreateFromStrings(System.String,System.String)">
            <summary>
            Creates from strings.
            </summary>
            <param name="vertexShaderCode">The vertex shader code.</param>
            <param name="fragmentShaderCode">The fragment shader code.</param>
            <returns></returns>
        </member>
        <member name="M:Zenseless.OpenGL.ShaderLoader.CreateException(Zenseless.OpenGL.ShaderGL,System.String)">
            <summary>
            Creates a <seealso cref="T:Zenseless.HLGL.ShaderCompileException"/>.
            </summary>
            <param name="shader">The shader.</param>
            <param name="shaderCode">The shader code.</param>
            <returns></returns>
        </member>
        <member name="M:Zenseless.OpenGL.ShaderLoader.ResolveIncludes(System.String,System.Func{System.String,System.String})">
            <summary>
            Searches for #include statements in the shader code and replaces them by the code in the include resource.
            </summary>
            <param name="shaderCode">The shader code.</param>
            <param name="GetIncludeCode">Functor that will be called with the include path and that should return the shader code.</param>
            <returns></returns>
            <exception cref="T:System.ArgumentNullException">GetIncludeCode</exception>
        </member>
        <member name="T:Zenseless.OpenGL.SpriteSheetRenderer">
            <summary>
            
            </summary>
        </member>
        <member name="M:Zenseless.OpenGL.SpriteSheetRenderer.#ctor(Zenseless.HLGL.ITexture,Zenseless.HLGL.SpriteSheet)">
            <summary>
            Initializes a new instance of the <see cref="T:Zenseless.OpenGL.SpriteSheetRenderer"/> class.
            </summary>
            <param name="texture">The texture.</param>
            <param name="spriteSheet">The sprite sheet.</param>
        </member>
        <member name="M:Zenseless.OpenGL.SpriteSheetRenderer.Activate">
            <summary>
            Activates this instance.
            </summary>
        </member>
        <member name="M:Zenseless.OpenGL.SpriteSheetRenderer.Deactivate">
            <summary>
            Deactivates this instance.
            </summary>
        </member>
        <member name="M:Zenseless.OpenGL.SpriteSheetRenderer.Draw(Zenseless.Geometry.IReadOnlyBox2D,System.UInt32)">
            <summary>
            Draws the specified rectangle.
            </summary>
            <param name="rectangle">The rectangle.</param>
            <param name="id">The identifier.</param>
        </member>
        <member name="P:Zenseless.OpenGL.SpriteSheetRenderer.SpriteSheet">
            <summary>
            Gets the sprite sheet.
            </summary>
            <value>
            The sprite sheet.
            </value>
        </member>
        <member name="P:Zenseless.OpenGL.SpriteSheetRenderer.Texture">
            <summary>
            Gets the texture.
            </summary>
            <value>
            The texture.
            </value>
        </member>
        <member name="T:Zenseless.OpenGL.Texture2dGL">
            <summary>
            
            </summary>
            <seealso cref="T:Zenseless.OpenGL.Texture" />
            <seealso cref="T:Zenseless.HLGL.ITexture2D" />
        </member>
        <member name="P:Zenseless.OpenGL.Texture2dGL.Width">
            <summary>
            Gets the width.
            </summary>
            <value>
            The width.
            </value>
        </member>
        <member name="P:Zenseless.OpenGL.Texture2dGL.Height">
            <summary>
            Gets the height.
            </summary>
            <value>
            The height.
            </value>
        </member>
        <member name="M:Zenseless.OpenGL.Texture2dGL.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Zenseless.OpenGL.Texture2dGL"/> class.
            </summary>
        </member>
        <member name="M:Zenseless.OpenGL.Texture2dGL.Create(System.Int32,System.Int32,System.Byte,System.Boolean)">
            <summary>
            Creates the specified width.
            </summary>
            <param name="width">The texture width in pixel.</param>
            <param name="height">The texture height in pixel.</param>
            <param name="components">The components.</param>
            <param name="floatingPoint">if set to <c>true</c> [floating point].</param>
            <returns></returns>
        </member>
        <member name="M:Zenseless.OpenGL.Texture2dGL.LoadPixels(System.IntPtr,System.Int32,System.Int32,OpenTK.Graphics.OpenGL4.PixelInternalFormat,OpenTK.Graphics.OpenGL4.PixelFormat,OpenTK.Graphics.OpenGL4.PixelType)">
            <summary>
            Loads the pixels.
            </summary>
            <param name="pixels">The pixels.</param>
            <param name="width">The width.</param>
            <param name="height">The height.</param>
            <param name="internalFormat">The internal format.</param>
            <param name="inputPixelFormat">The input pixel format.</param>
            <param name="type">The type.</param>
        </member>
        <member name="M:Zenseless.OpenGL.Texture2dGL.LoadPixels(System.IntPtr,System.Int32,System.Int32,System.Byte,System.Boolean)">
            <summary>
            Loads the pixels.
            </summary>
            <param name="pixels">The pixels.</param>
            <param name="width">The width.</param>
            <param name="height">The height.</param>
            <param name="components">The components.</param>
            <param name="floatingPoint">if set to <c>true</c> [floating point].</param>
        </member>
        <member name="T:Zenseless.OpenGL.TextureArray2dGL">
            <summary>
            
            </summary>
            <seealso cref="T:Zenseless.OpenGL.Texture" />
            <seealso cref="T:Zenseless.HLGL.ITexture2dArray" />
        </member>
        <member name="P:Zenseless.OpenGL.TextureArray2dGL.Width">
            <summary>
            Gets the width.
            </summary>
            <value>
            The width.
            </value>
        </member>
        <member name="P:Zenseless.OpenGL.TextureArray2dGL.Height">
            <summary>
            Gets the height.
            </summary>
            <value>
            The height.
            </value>
        </member>
        <member name="P:Zenseless.OpenGL.TextureArray2dGL.Elements">
            <summary>
            Gets the elements.
            </summary>
            <value>
            The elements.
            </value>
        </member>
        <member name="M:Zenseless.OpenGL.TextureArray2dGL.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Zenseless.OpenGL.TextureArray2dGL"/> class.
            </summary>
        </member>
        <member name="M:Zenseless.OpenGL.TextureArray2dGL.Load(System.Byte[],System.Int32,System.Byte,System.Boolean)">
            <summary>
            Loads the specified pixels.
            </summary>
            <param name="pixels">The pixels.</param>
            <param name="element">The element.</param>
            <param name="components">The components.</param>
            <param name="floatingPoint">if set to <c>true</c> [floating point].</param>
        </member>
        <member name="M:Zenseless.OpenGL.TextureArray2dGL.Load(System.Byte[],System.Int32,OpenTK.Graphics.OpenGL4.PixelFormat,OpenTK.Graphics.OpenGL4.PixelType)">
            <summary>
            Loads the specified pixels.
            </summary>
            <param name="pixels">The pixels.</param>
            <param name="element">The element.</param>
            <param name="inputPixelFormat">The input pixel format.</param>
            <param name="type">The type.</param>
        </member>
        <member name="M:Zenseless.OpenGL.TextureArray2dGL.SetFormat(System.Int32,System.Int32,System.Int32,System.Int32,System.Byte,System.Boolean)">
            <summary>
            Sets the format.
            </summary>
            <param name="width">The width.</param>
            <param name="height">The height.</param>
            <param name="elements">The elements.</param>
            <param name="levels">The levels.</param>
            <param name="components">The components.</param>
            <param name="floatingPoint">if set to <c>true</c> [floating point].</param>
        </member>
        <member name="M:Zenseless.OpenGL.TextureArray2dGL.SetFormat(System.Int32,System.Int32,System.Int32,System.Int32,OpenTK.Graphics.OpenGL4.SizedInternalFormat)">
            <summary>
            Sets the format.
            </summary>
            <param name="width">The width.</param>
            <param name="height">The height.</param>
            <param name="elements">The elements.</param>
            <param name="levels">The levels.</param>
            <param name="internalFormat">The internal format.</param>
        </member>
        <member name="T:Zenseless.OpenGL.TextureDebugger">
            <summary>
            Quickly draw a texture full-screen
            </summary>
        </member>
        <member name="M:Zenseless.OpenGL.TextureDebugger.Draw(Zenseless.HLGL.ITexture2D)">
            <summary>
            Draws the specified texture.
            </summary>
            <param name="texture">The texture.</param>
        </member>
        <member name="T:Zenseless.OpenGL.TextureFont">
            <summary>
            allows to print text were the individual characters come all from a single texture
            </summary>
            <seealso cref="T:Zenseless.Patterns.Disposable" />
        </member>
        <member name="M:Zenseless.OpenGL.TextureFont.#ctor(Zenseless.HLGL.ITexture,System.UInt32,System.Byte,System.Single,System.Single,System.Single)">
            <summary>
            Create a new font that can be printed in OpenGL
            </summary>
            <param name="texture">texture containing a equally spaced grid of characters</param>
            <param name="charactersPerLine">number of characters per grid row</param>
            <param name="firstAsciiCode">ascii code of upper left most character in the grid</param>
            <param name="characterBoundingBoxWidth">bounding box width of each character cell, allows to zoom in/out of each character</param>
            <param name="characterBoundingBoxHeight">bounding box height of each character cell, allows to zoom in/out of each character</param>
            <param name="characterSpacing">how much to move to the right after drawing a single character</param>
        </member>
        <member name="M:Zenseless.OpenGL.TextureFont.ConvertString2Ascii(System.String)">
            <summary>
            Converts the string2 ASCII.
            </summary>
            <param name="text">The text.</param>
            <returns></returns>
        </member>
        <member name="M:Zenseless.OpenGL.TextureFont.Print(System.Single,System.Single,System.Single,System.Single,System.String)">
            <summary>
            Prints the specified x position.
            </summary>
            <param name="xPos">The x position.</param>
            <param name="yPos">The y position.</param>
            <param name="zPos">The z position.</param>
            <param name="size">The size.</param>
            <param name="text">The text.</param>
        </member>
        <member name="M:Zenseless.OpenGL.TextureFont.Width(System.String,System.Single)">
            <summary>
            Widthes the specified text.
            </summary>
            <param name="text">The text.</param>
            <param name="size">The size.</param>
            <returns></returns>
        </member>
        <member name="F:Zenseless.OpenGL.TextureFont.baseList">
            <summary>
            The base list
            </summary>
        </member>
        <member name="F:Zenseless.OpenGL.TextureFont.texFont">
            <summary>
            The tex font
            </summary>
        </member>
        <member name="F:Zenseless.OpenGL.TextureFont.characterSpacing">
            <summary>
            The character spacing
            </summary>
        </member>
        <member name="M:Zenseless.OpenGL.TextureFont.PrintRawQuads(System.Byte[])">
            <summary>
            Prints the raw quads.
            </summary>
            <param name="text">The text.</param>
        </member>
        <member name="M:Zenseless.OpenGL.TextureFont.DisposeResources">
            <summary>
            Will be called from the default Dispose method.
            </summary>
        </member>
        <member name="T:Zenseless.OpenGL.Texture">
            <summary>
            Gl Texture class that allows loading from a file.
            </summary>
            <seealso cref="T:Zenseless.Patterns.Disposable" />
            <seealso cref="T:Zenseless.HLGL.ITexture" />
        </member>
        <member name="M:Zenseless.OpenGL.Texture.#ctor(OpenTK.Graphics.OpenGL4.TextureTarget)">
            <summary>
            Initializes a new instance of the <see cref="T:Zenseless.OpenGL.Texture" /> class.
            </summary>
            <param name="target">The target.</param>
        </member>
        <member name="P:Zenseless.OpenGL.Texture.Target">
            <summary>
            Gets the target.
            </summary>
            <value>
            The target.
            </value>
        </member>
        <member name="P:Zenseless.OpenGL.Texture.ID">
            <summary>
            Gets the identifier.
            </summary>
            <value>
            The identifier.
            </value>
        </member>
        <member name="P:Zenseless.OpenGL.Texture.Filter">
            <summary>
            Gets or sets the filter.
            </summary>
            <value>
            The filter.
            </value>
        </member>
        <member name="P:Zenseless.OpenGL.Texture.WrapFunction">
            <summary>
            Gets or sets the wrap function.
            </summary>
            <value>
            The wrap function.
            </value>
        </member>
        <member name="M:Zenseless.OpenGL.Texture.Activate">
            <summary>
            Activates this instance.
            </summary>
        </member>
        <member name="M:Zenseless.OpenGL.Texture.Deactivate">
            <summary>
            Deactivates this instance.
            </summary>
        </member>
        <member name="M:Zenseless.OpenGL.Texture.Convert(System.Byte,System.Boolean)">
            <summary>
            Converts the specified components.
            </summary>
            <param name="components">The components.</param>
            <param name="floatingPoint">if set to <c>true</c> [floating point].</param>
            <returns></returns>
            <exception cref="T:System.ArgumentOutOfRangeException">Invalid Format only 1-4 components allowed</exception>
        </member>
        <member name="M:Zenseless.OpenGL.Texture.Convert(System.Byte)">
            <summary>
            Converts the specified components.
            </summary>
            <param name="components">The components.</param>
            <returns></returns>
            <exception cref="T:System.ArgumentOutOfRangeException">Invalid Format only 1-4 components allowed</exception>
        </member>
        <member name="M:Zenseless.OpenGL.Texture.DisposeResources">
            <summary>
            Will be called from the default Dispose method.
            </summary>
        </member>
        <member name="F:Zenseless.OpenGL.Texture.m_uTextureID">
            <summary>
            The m u texture identifier
            </summary>
        </member>
        <member name="F:Zenseless.OpenGL.Texture.filterMode">
            <summary>
            The filter mode
            </summary>
        </member>
        <member name="F:Zenseless.OpenGL.Texture.wrapFunction">
            <summary>
            The wrap function
            </summary>
        </member>
        <member name="M:Zenseless.OpenGL.Texture.ConvertWrapFunction(Zenseless.HLGL.TextureWrapFunction)">
            <summary>
            Converts the wrap function.
            </summary>
            <param name="wrapFunc">The wrap function.</param>
            <returns></returns>
            <exception cref="T:System.ArgumentOutOfRangeException">Unknown wrap function</exception>
        </member>
        <member name="M:Zenseless.OpenGL.Texture.SetFilter(Zenseless.HLGL.TextureFilterMode)">
            <summary>
            Sets the filter.
            </summary>
            <param name="filter">The filter.</param>
        </member>
        <member name="M:Zenseless.OpenGL.Texture.SetWrapMode(Zenseless.HLGL.TextureWrapFunction)">
            <summary>
            Sets the wrap mode.
            </summary>
            <param name="wrapFunc">The wrap function.</param>
        </member>
        <member name="T:Zenseless.OpenGL.TextureLoader">
            <summary>
            
            </summary>
        </member>
        <member name="M:Zenseless.OpenGL.TextureLoader.FromArray``1(``0[0:,0:],OpenTK.Graphics.OpenGL4.PixelInternalFormat,OpenTK.Graphics.OpenGL4.PixelFormat,OpenTK.Graphics.OpenGL4.PixelType)">
            <summary>
            Froms the array.
            </summary>
            <typeparam name="TYPE">The type of the ype.</typeparam>
            <param name="data">The data.</param>
            <param name="internalFormat">The internal format.</param>
            <param name="format">The format.</param>
            <param name="type">The type.</param>
            <returns></returns>
        </member>
        <member name="M:Zenseless.OpenGL.TextureLoader.ToBuffer(Zenseless.HLGL.ITexture2D,System.Numerics.Vector4[0:,0:]@)">
            <summary>
            Saves a texture to a buffer.
            </summary>
            <param name="texture">The texture to save.</param>
            <param name="buffer">The buffer to write to</param>
        </member>
        <member name="M:Zenseless.OpenGL.TextureLoader.ToBuffer(Zenseless.HLGL.ITexture2D,System.Single[0:,0:]@)">
            <summary>
            Saves a texture to a buffer.
            </summary>
            <param name="texture">The texture to save.</param>
            <param name="buffer">The buffer to write to</param>
        </member>
        <member name="T:Zenseless.OpenGL.TextureLoaderDrawing">
            <summary>
            
            </summary>
        </member>
        <member name="M:Zenseless.OpenGL.TextureLoaderDrawing.FromBitmap(System.Drawing.Bitmap)">
            <summary>
            Load a texture from a bitmap.
            </summary>
            <param name="bitmap">The bitmap.</param>
            <returns></returns>
        </member>
        <member name="M:Zenseless.OpenGL.TextureLoaderDrawing.FromBitmap(Zenseless.OpenGL.Texture2dGL,System.Drawing.Bitmap)">
            <summary>
            Loads texture date from a bitmap into a Texture2dGL instance.
            </summary>
            <param name="texture">The texture instance.</param>
            <param name="bitmap">The bitmap.</param>
        </member>
        <member name="M:Zenseless.OpenGL.TextureLoaderDrawing.FromFile(System.String)">
            <summary>
            Load a texture from a file.
            </summary>
            <param name="fileName">Name of the file.</param>
            <returns></returns>
            <exception cref="T:System.ArgumentException"></exception>
            <exception cref="T:System.IO.FileLoadException"></exception>
        </member>
        <member name="M:Zenseless.OpenGL.TextureLoaderDrawing.SaveToFile(Zenseless.HLGL.ITexture2D,System.String,System.Drawing.Imaging.PixelFormat)">
            <summary>
            Saves to file.
            </summary>
            <param name="texture">The texture.</param>
            <param name="fileName">Name of the file.</param>
            <param name="format">The format.</param>
        </member>
        <member name="M:Zenseless.OpenGL.TextureLoaderDrawing.SaveToBitmap(Zenseless.HLGL.ITexture2D,System.Drawing.Imaging.PixelFormat)">
            <summary>
            Saves to bitmap.
            </summary>
            <param name="texture">The texture.</param>
            <param name="format">The format.</param>
            <returns></returns>
        </member>
        <member name="M:Zenseless.OpenGL.TextureLoaderDrawing.SelectPixelFormat(System.Drawing.Imaging.PixelFormat)">
            <summary>
            Selects the pixel format.
            </summary>
            <param name="pixelFormat">The pixel format.</param>
            <returns></returns>
            <exception cref="T:System.ArgumentException">Wrong pixel format " + pixelFormat.ToString()</exception>
        </member>
        <member name="M:Zenseless.OpenGL.TextureLoaderDrawing.SelectInternalPixelFormat(System.Drawing.Imaging.PixelFormat)">
            <summary>
            Selects the internal pixel format.
            </summary>
            <param name="pixelFormat">The pixel format.</param>
            <returns></returns>
            <exception cref="T:System.ArgumentException">Wrong pixel format " + pixelFormat.ToString()</exception>
        </member>
        <member name="T:Zenseless.OpenGL.TextureLoaderImaging">
            <summary>
            
            </summary>
        </member>
        <member name="M:Zenseless.OpenGL.TextureLoaderImaging.FromStream(System.IO.Stream)">
            <summary>
            Froms the stream.
            </summary>
            <param name="stream">The stream.</param>
            <returns></returns>
        </member>
        <member name="M:Zenseless.OpenGL.TextureLoaderImaging.SelectInternalPixelFormat(System.Windows.Media.PixelFormat)">
            <summary>
            Selects the internal pixel format.
            </summary>
            <param name="pixelFormat">The pixel format.</param>
            <returns></returns>
            <exception cref="T:System.ArgumentException">Wrong pixel format " + pixelFormat.ToString()</exception>
        </member>
        <member name="M:Zenseless.OpenGL.TextureLoaderImaging.SelectPixelFormat(System.Windows.Media.PixelFormat)">
            <summary>
            Selects the pixel format.
            </summary>
            <param name="pixelFormat">The pixel format.</param>
            <returns></returns>
            <exception cref="T:System.ArgumentException">Wrong pixel format " + pixelFormat.ToString()</exception>
        </member>
        <member name="T:Zenseless.OpenGL.PostProcessing">
            <summary>
            
            </summary>
            <seealso cref="T:Zenseless.Patterns.Disposable" />
        </member>
        <member name="T:Zenseless.OpenGL.PostProcessing.SetUniforms">
            <summary>
            
            </summary>
            <param name="currentShader">The current shader.</param>
        </member>
        <member name="M:Zenseless.OpenGL.PostProcessing.#ctor(Zenseless.HLGL.IShaderProgram)">
            <summary>
            Initializes a new instance of the <see cref="T:Zenseless.OpenGL.PostProcessing"/> class.
            </summary>
        </member>
        <member name="M:Zenseless.OpenGL.PostProcessing.Draw(Zenseless.HLGL.ITexture,Zenseless.OpenGL.PostProcessing.SetUniforms)">
            <summary>
            Draws the specified texture.
            </summary>
            <param name="texture">The texture.</param>
            <param name="setUniformsHandler">The set uniforms handler.</param>
        </member>
        <member name="F:Zenseless.OpenGL.PostProcessing.shaderProgram">
            <summary>
            The shader
            </summary>
        </member>
        <member name="M:Zenseless.OpenGL.PostProcessing.DisposeResources">
            <summary>
            Will be called from the default Dispose method.
            </summary>
        </member>
        <member name="T:Zenseless.OpenGL.VAO">
            <summary>
            OpenGL Vertex Array Object
            </summary>
            <seealso cref="T:Zenseless.Patterns.Disposable" />
        </member>
        <member name="M:Zenseless.OpenGL.VAO.#ctor(OpenTK.Graphics.OpenGL4.PrimitiveType)">
            <summary>
            Initializes a new OpenGL Vertex Array Object (<see cref="T:Zenseless.OpenGL.VAO"/>) instance.
            </summary>
        </member>
        <member name="P:Zenseless.OpenGL.VAO.IDLength">
            <summary>
            Gets the length of the identifier.
            </summary>
            <value>
            The length of the identifier.
            </value>
        </member>
        <member name="P:Zenseless.OpenGL.VAO.PrimitiveType">
            <summary>
            Gets or sets the type of the primitive.
            </summary>
            <value>
            The type of the primitive.
            </value>
        </member>
        <member name="P:Zenseless.OpenGL.VAO.DrawElementsType">
            <summary>
            Gets the type of the draw elements.
            </summary>
            <value>
            The type of the draw elements.
            </value>
        </member>
        <member name="M:Zenseless.OpenGL.VAO.Activate">
            <summary>
            Activates this instance.
            </summary>
        </member>
        <member name="M:Zenseless.OpenGL.VAO.Deactivate">
            <summary>
            Deactivates this instance.
            </summary>
        </member>
        <member name="M:Zenseless.OpenGL.VAO.SetIndex``1(``0[])">
            <summary>
            Sets the index array.
            </summary>
            <typeparam name="IndexType">The index data type.</typeparam>
            <param name="data">The index array data.</param>
        </member>
        <member name="M:Zenseless.OpenGL.VAO.SetAttribute(System.Int32,System.Array,System.Type,System.Int32,System.Boolean)">
            <summary>
            Sets the attribute from an array.
            </summary>
            <param name="bindingID">The binding identifier.</param>
            <param name="data">The attribute array data.</param>
            <param name="baseType">Each array element consists of a type that is made up of multiple base types like for Vector3 the base type is float.</param>
            <param name="baseTypeCount">Each array element consists of a type that is made up of multiple base types like for Vector3 the base type is float and the base type count is 3.</param>
            <param name="perInstance">
            if set to <c>true</c> attribute array contains one entry for each instance
            if set to <c>false</c> all attribute array elements are for one instance
            </param>
        </member>
        <member name="M:Zenseless.OpenGL.VAO.SetAttribute``1(System.Int32,``0[],System.Boolean)">
            <summary>
            Sets a vertex attribute array for the given <paramref name="bindingID"/>.
            </summary>
            <param name="bindingID">The binding ID.</param>
            <param name="data">The attribute array data.</param>
            <param name="perInstance">
            if set to <c>true</c> attribute array contains one entry for each instance
            if set to <c>false</c> all attribute array elements are for one instance
            </param>
        </member>
        <member name="M:Zenseless.OpenGL.VAO.SetAttribute(System.Int32,System.Numerics.Matrix4x4[],System.Boolean)">
            <summary>
            sets or updates a vertex attribute of type Matrix4
            Matrix4 is stored row-major, but OpenGL expects data to be column-major, so the Matrix4 inputs become transposed in the shader
            </summary>
            <param name="bindingID">shader binding location</param>
            <param name="data">array of Matrix4 inputs</param>
            <param name="perInstance">if set to <c>true</c> [per instance].</param>
        </member>
        <member name="M:Zenseless.OpenGL.VAO.Draw(System.Int32)">
            <summary>
            Draws the VAO data (instanced if specified).
            </summary>
            <param name="instanceCount">The instance count (how often should the VAO data be drawn).</param>
        </member>
        <member name="M:Zenseless.OpenGL.VAO.Draw">
            <summary>
            Draws the VAO data (instanced if any instance data is given).
            </summary>
        </member>
        <member name="M:Zenseless.OpenGL.VAO.DisposeResources">
            <summary>
            Will be called from the default Dispose method.
            Implementers should dispose all their resources her.
            </summary>
        </member>
        <member name="F:Zenseless.OpenGL.VAO.idVAO">
            <summary>
            The identifier vao
            </summary>
        </member>
        <member name="F:Zenseless.OpenGL.VAO.idBufferBinding">
            <summary>
            The identifier buffer binding
            </summary>
        </member>
        <member name="F:Zenseless.OpenGL.VAO.boundBuffers">
            <summary>
            The bound buffers
            </summary>
        </member>
        <member name="T:Zenseless.OpenGL.VAOLoader">
            <summary>
            Provides static methods for VertexArrayObject data loading
            </summary>
        </member>
        <member name="M:Zenseless.OpenGL.VAOLoader.FromMesh(Zenseless.Geometry.Mesh,Zenseless.HLGL.IShaderProgram)">
            <summary>
            Creates a VertexArrayObject from a mesh expecting the MeshAttribute names as shader variable names for the attributes 
            </summary>
            <param name="mesh">From which to load positions, indices, normals, texture coordinates</param>
            <param name="shaderProgram">Used for the attribute location bindings</param>
            <returns>A vertex array object</returns>
        </member>
    </members>
</doc>
