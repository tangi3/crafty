<?xml version="1.0"?>
<doc>
    <assembly>
        <name>Zenseless.Patterns</name>
    </assembly>
    <members>
        <member name="T:Zenseless.Patterns.CachedCalculatedValue`1">
            <summary>
            Class that implements the dirty flag pattern http://gameprogrammingpatterns.com/dirty-flag.html.
            A value is cached and only recalculated, if invalidated.
            </summary>
            <typeparam name="VALUE_TYPE">The type of the cached value.</typeparam>
        </member>
        <member name="M:Zenseless.Patterns.CachedCalculatedValue`1.#ctor(System.Func{`0})">
            <summary>
            Initializes a new instance of the <see cref="T:Zenseless.Patterns.CachedCalculatedValue`1"/> class.
            </summary>
            <param name="calculateValue">Functor for calculating the value.</param>
            <exception cref="T:System.ArgumentNullException">calculateValue</exception>
        </member>
        <member name="M:Zenseless.Patterns.CachedCalculatedValue`1.Invalidate">
            <summary>
            Invalidates the cached value.
            </summary>
        </member>
        <member name="P:Zenseless.Patterns.CachedCalculatedValue`1.Value">
            <summary>
            Gets the cached value. If value is not valid (isDirty == true) it will get recalculated.
            </summary>
            <value>
            The value.
            </value>
        </member>
        <member name="P:Zenseless.Patterns.CachedCalculatedValue`1.IsCacheDirty">
            <summary>
            Gets a value indicating whether the cache is dirty (needs to be recalculated).
            </summary>
            <value>
              <c>true</c> if this instance cache is dirty; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="T:Zenseless.Patterns.DebugTools">
            <summary>
            
            </summary>
        </member>
        <member name="M:Zenseless.Patterns.DebugTools.GetSourcePositionForConsoleRef(System.String,System.Int32)">
            <summary>
            Returns the full path of the source file that contains the caller. This is the file path at the time of compile.
            </summary>
            <param name="doNotAssignCallerFilePath">Dummy default parameter. Needed for internal attribute evaluation. Do not assign.</param>
            <param name="lineNumber"></param>
            <returns></returns>
        </member>
        <member name="M:Zenseless.Patterns.DebugTools.Combine(System.Collections.Generic.IEnumerable{System.String},System.String)">
            <summary>
            Returns a <see cref="T:System.String" /> that is the concatenation of the input strings.
            </summary>
            <param name="inputStrings">The input strings.</param>
            <param name="delimiter">The delimiter (can be <seealso cref="F:System.String.Empty"/> if no delimiter is wanted)</param>
            <returns>
            A concatenated <see cref="T:System.String" /> that represents this instance.
            </returns>
        </member>
        <member name="T:Zenseless.Patterns.Disposable">
            <summary>
            Implements the default disposing behavior as recommended by Microsoft.
            If you have resources that need disposing, subclass this class.
            </summary>
        </member>
        <member name="M:Zenseless.Patterns.Disposable.DisposeResources">
            <summary>
            Will be called from the default Dispose method. 
            Implementers should dispose all their resources her.
            </summary>
        </member>
        <member name="P:Zenseless.Patterns.Disposable.Disposed">
            <summary>
            Dispose status of the instance.
            </summary>
        </member>
        <member name="M:Zenseless.Patterns.Disposable.Dispose">
            <summary>
            Performs application-defined tasks associated with freeing, releasing, or resetting unmanaged resources.
            </summary>
        </member>
        <member name="T:Zenseless.Patterns.ExponentialSmoothing">
            <summary>
            Class that implements exponential smoothing for series data
            https://en.wikipedia.org/wiki/Exponential_smoothing#Choosing_the_initial_smoothed_value
            </summary>
        </member>
        <member name="M:Zenseless.Patterns.ExponentialSmoothing.#ctor(System.Double)">
            <summary>
            Initializes a new instance of the <see cref="T:Zenseless.Patterns.ExponentialSmoothing"/> class.
            </summary>
            <param name="stableWeight">The stable weight.</param>
        </member>
        <member name="M:Zenseless.Patterns.ExponentialSmoothing.Clear">
            <summary>
            Clears the series.
            </summary>
        </member>
        <member name="P:Zenseless.Patterns.ExponentialSmoothing.SmoothedValue">
            <summary>
            Gets the current smoothed value.
            </summary>
            <value>
            The smoothed value.
            </value>
        </member>
        <member name="M:Zenseless.Patterns.ExponentialSmoothing.NewSample(System.Double)">
            <summary>
            Adds a new sample to the series.
            </summary>
            <param name="value">The value.</param>
        </member>
        <member name="T:Zenseless.Patterns.FileWatcher">
            <summary>
            Watches the file system for changes to a given file
            </summary>
        </member>
        <member name="M:Zenseless.Patterns.FileWatcher.#ctor(System.String,System.ComponentModel.ISynchronizeInvoke)">
            <summary>
            Initializes a new instance of the <see cref="T:Zenseless.Patterns.FileWatcher"/> class.
            </summary>
            <param name="filePath">The file path.</param>
            <param name="syncObject">The synchronize object.</param>
            <exception cref="T:System.IO.FileNotFoundException">File does not exist</exception>
        </member>
        <member name="E:Zenseless.Patterns.FileWatcher.Changed">
            <summary>
            Occurs when the file has changed on disc.
            </summary>
        </member>
        <member name="P:Zenseless.Patterns.FileWatcher.Dirty">
            <summary>
            Gets or sets a value indicating whether this <see cref="T:Zenseless.Patterns.FileWatcher"/> is dirty.
            </summary>
            <value>
              <c>true</c> if dirty; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:Zenseless.Patterns.FileWatcher.FullPath">
            <summary>
            Gets the full path of the file.
            </summary>
            <value>
            The full path.
            </value>
        </member>
        <member name="M:Zenseless.Patterns.FileWatcher.DisposeResources">
            <summary>
            Will be called from the default Dispose method.
            Implementers should dispose all their resources her.
            </summary>
        </member>
        <member name="T:Zenseless.Patterns.GameTime">
            <summary>
            Intended as a source for time.
            Can do frames-per-second counting.
            Uses a <see cref="T:System.Diagnostics.Stopwatch" />
            </summary>
        </member>
        <member name="P:Zenseless.Patterns.GameTime.DeltaTime">
            <summary>
            Gets the time since the last frame.
            </summary>
            <value>
            The delta time in seconds.
            </value>
        </member>
        <member name="P:Zenseless.Patterns.GameTime.FPS">
            <summary>
            Gets the current frames-per-second.
            </summary>
            <value>
            Frames-per-second as a float.
            </value>
        </member>
        <member name="P:Zenseless.Patterns.GameTime.AbsoluteTime">
            <summary>
            Gets the absolute time since start in seconds.
            </summary>
            <value>
            The absolute time in seconds.
            </value>
        </member>
        <member name="P:Zenseless.Patterns.GameTime.AbsoluteMilliseconds">
            <summary>
            Gets the elapsed time in milliseconds.
            </summary>
            <value>
            The time in milliseconds.
            </value>
        </member>
        <member name="M:Zenseless.Patterns.GameTime.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Zenseless.Patterns.GameTime"/> class.
            This will start the time counting
            </summary>
        </member>
        <member name="P:Zenseless.Patterns.GameTime.IsRunning">
            <summary>
            Gets or sets a value indicating whether this instance is running.
            </summary>
            <value>
              <c>true</c> if this instance is running; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="M:Zenseless.Patterns.GameTime.NewFrame">
            <summary>
            Start a new frame. You have to call this method exactly once per frame for correct FPS counting and delta time.
            </summary>
        </member>
        <member name="T:Zenseless.Patterns.ITime">
            <summary>
            Interface for querying absolute and last frame time
            results are always in seconds
            </summary>
        </member>
        <member name="P:Zenseless.Patterns.ITime.DeltaTime">
            <summary>
            Gets the time since the last frame.
            </summary>
            <value>
            The delta time in seconds.
            </value>
        </member>
        <member name="P:Zenseless.Patterns.ITime.AbsoluteTime">
            <summary>
            Gets the absolute time since start in seconds.
            </summary>
            <value>
            The absolute time in seconds.
            </value>
        </member>
        <member name="T:Zenseless.Patterns.ITimedUpdate">
            <summary>
            Interface for updates at a specified absolute time.
            </summary>
        </member>
        <member name="M:Zenseless.Patterns.ITimedUpdate.Update(System.Single)">
            <summary>
            Updates at the specified absolute time.
            </summary>
            <param name="absoluteTime">The absolute time in seconds.</param>
        </member>
        <member name="T:Zenseless.Patterns.NotifyPropertyChanged">
            <summary>
            Class that implements a RaisePropertyChanged method for handling property changes
            </summary>
            <seealso cref="T:System.ComponentModel.INotifyPropertyChanged" />
        </member>
        <member name="E:Zenseless.Patterns.NotifyPropertyChanged.PropertyChanged">
            <summary>
            Occurs when a property value changes.
            </summary>
        </member>
        <member name="M:Zenseless.Patterns.NotifyPropertyChanged.RaisePropertyChanged(System.String)">
            <summary>
            Raises the property changed event.
            </summary>
            <param name="propertyName">Name of the property. Will be filled automatically with the caller member name.</param>
        </member>
        <member name="T:Zenseless.Patterns.PathTools">
            <summary>
            Contains helper functions for file paths
            </summary>
        </member>
        <member name="M:Zenseless.Patterns.PathTools.GetCurrentProcessPath">
            <summary>
            Returns the full path of the main module of the current process.
            </summary>
            <returns>Full path of the main module of the current process.</returns>
        </member>
        <member name="M:Zenseless.Patterns.PathTools.GetCurrentProcessDir">
            <summary>
            Returns the directory of the main module of the current process.
            </summary>
            <returns>Directory of the main module of the current process.</returns>
        </member>
        <member name="M:Zenseless.Patterns.PathTools.GetCurrentProcessOutputDir(System.String)">
            <summary>
            Returns the output directory for the current process:
            a sub-directory of the directory the executable resides in 
            and with the name of the executable and an appended time code.
            </summary>
            <param name="timeCodeFormat">string format for DateTime</param>
            <returns>Output directory</returns>
        </member>
        <member name="M:Zenseless.Patterns.PathTools.GetFullPath(System.String)">
            <summary>
            Returns the absolute path for the specified path string by using <see cref="M:System.IO.Path.GetFullPath(System.String)"/>.
            If an exception is thrown by <see cref="M:System.IO.Path.GetFullPath(System.String)"/> the input parameter is returned.
            </summary>
            <param name="fileName">The file or directory for which to obtain absolute path information.</param>
            <returns>The fully qualified location of path, such as "C:\MyFile.txt".</returns>
        </member>
        <member name="M:Zenseless.Patterns.PathTools.GetRelativePath(System.String,System.String)">
            <summary>
            Returns the relative path. If no relative path is valid, the absolute path is returned.
            </summary>
            <param name="referencePath">the path the result should be relative to</param>
            <param name="inputPath">the path to be converted into relative form</param>
            <returns></returns>
        </member>
        <member name="M:Zenseless.Patterns.PathTools.GetSourceFilePath(System.String)">
            <summary>
            Returns the full path of the source file that contains the caller. This is the file path at the time of compile.
            </summary>
            <param name="doNotAssignCallerFilePath">Dummy default parameter. Needed for internal attribute evaluation. Do not assign.</param>
            <returns></returns>
        </member>
        <member name="M:Zenseless.Patterns.PathTools.IncludeTrailingPathDelimiter(System.String)">
            <summary>
            IncludeTrailingPathDelimiter ensures that a path name ends with a trailing path delimiter ('\" on Windows, '/' on Linux). 
            If S already ends with a trailing delimiter character, it is returned unchanged; otherwise path with appended delimiter character is returned. 
            </summary>
            <param name="path">Input path</param>
            <returns>Input path with trailing path delimiter</returns>
        </member>
        <member name="T:Zenseless.Patterns.PeriodicUpdate">
            <summary>
            Invokes a registered callback in regular intervals in the main thread 
            (important if you do for instance OpenGL stuff)
            </summary>
            <seealso cref="T:Zenseless.Patterns.ITimedUpdate" />
        </member>
        <member name="P:Zenseless.Patterns.PeriodicUpdate.PeriodElapsedCount">
            <summary>
            Gets how often the period has elapsed.
            </summary>
            <value>
            The period elapsed count.
            </value>
        </member>
        <member name="P:Zenseless.Patterns.PeriodicUpdate.PeriodRelativeTime">
            <summary>
            Gets the period relative time. The time that has elapsed since the current period has started.
            </summary>
            <value>
            The time that has elapsed since the current period has started.
            </value>
        </member>
        <member name="P:Zenseless.Patterns.PeriodicUpdate.Enabled">
            <summary>
            Gets a value indicating whether this <see cref="T:Zenseless.Patterns.PeriodicUpdate"/> is enabled.
            </summary>
            <value>
              <c>true</c> if enabled - callback and internal time counting active from this point onward. 
              otherwise, <c>false - Stops invoking of the callback and internal time counting.</c>.
            </value>
        </member>
        <member name="T:Zenseless.Patterns.PeriodicUpdate.PeriodElapsedHandler">
            <summary>
            Event handler delegate type declaration
            </summary>
            <param name="sender">The <see cref="T:Zenseless.Patterns.PeriodicUpdate"/> instance that invokes the callback.</param>
            <param name="absoluteTime">The absolute time at invoking.</param>
        </member>
        <member name="E:Zenseless.Patterns.PeriodicUpdate.PeriodElapsed">
            <summary>
            A registered callback is called each time the Interval period has elapsed.
            </summary>
        </member>
        <member name="P:Zenseless.Patterns.PeriodicUpdate.Period">
            <summary>
            Gets or sets the period of time.
            </summary>
            <value>
            The period of time.
            </value>
        </member>
        <member name="M:Zenseless.Patterns.PeriodicUpdate.#ctor(System.Single)">
            <summary>
            Initializes a new instance of the <see cref="T:Zenseless.Patterns.PeriodicUpdate"/> class.
            </summary>
            <param name="period">The regular time interval in which <see cref="E:Zenseless.Patterns.PeriodicUpdate.PeriodElapsed"/> will be called.</param>
        </member>
        <member name="M:Zenseless.Patterns.PeriodicUpdate.Update(System.Single)">
            <summary>
            Updates the specified absolute time. 
            This method is responsible for calling the <see cref="E:Zenseless.Patterns.PeriodicUpdate.PeriodElapsed"/> callback.
            This method has to be called at least once per frame to have frame exact callback evaluation.
            </summary>
            <param name="absoluteTime">The current absolute time.</param>
        </member>
        <member name="F:Zenseless.Patterns.PeriodicUpdate.absoluteStartTime">
            <summary>
            The absolute start time in seconds
            </summary>
        </member>
        <member name="T:Zenseless.Patterns.Serialization">
            <summary>
            Contains class instance serialization/deserialization methods. 
            Can be used for persisting class instances to disc and reading them back to memory.
            </summary>
        </member>
        <member name="M:Zenseless.Patterns.Serialization.FromXMLFile(System.String,System.Type)">
            <summary>
            Deserializes from an XML file into a new class instance of a given type.
            </summary>
            <param name="fileName">The file name from which the serialized instance will be restored from.</param>
            <param name="type">The type of the class that will be deserialized.</param>
            <returns>Deserialized class instance</returns>
        </member>
        <member name="M:Zenseless.Patterns.Serialization.FromXmlString(System.String,System.Type)">
            <summary>
            Deserializes from an XML string into a new class instance of a given type.
            </summary>
            <param name="xmlString">XML string from which to deserialize.</param>
            <param name="type">The type of the class that will be deserialized.</param>
            <returns>Deserialized class instance</returns>
        </member>
        <member name="M:Zenseless.Patterns.Serialization.FromBinFile(System.String)">
            <summary>
            Deserializes an new obj instance from a binary file.
            </summary>
            <param name="fileName">The file name from which the serialized instance will be restored from.</param>
            <returns>Deserialized class instance</returns>
        </member>
        <member name="M:Zenseless.Patterns.Serialization.FromBinStream(System.IO.Stream)">
            <summary>
            Deserializes an new obj instance from a binary stream.
            </summary>
            <param name="binStream">The binary stream from which the serialized instance will be restored from.</param>
            <returns>Deserialized class instance</returns>
        </member>
        <member name="M:Zenseless.Patterns.Serialization.ToXMLFile(System.Object,System.String)">
            <summary>
            Serializes the given class instance into a XML format file.
            </summary>
            <param name="serializable">The class instance to be serialized.</param>
            <param name="fileName">The file name the serialized instance will be stored to.</param>
        </member>
        <member name="M:Zenseless.Patterns.Serialization.ToXmlString(System.Object)">
            <summary>
            Serializes the given class instance into a XML string.
            </summary>
            <param name="serializable">The class instance to be serialized.</param>
        </member>
        <member name="M:Zenseless.Patterns.Serialization.ToBinFile(System.Object,System.String)">
            <summary>
            Serializes the given class instance into a binary file.
            </summary>
            <param name="serializable">The class instance to be serialized.</param>
            <param name="fileName">The file name the serialized instance will be stored to.</param>
        </member>
        <member name="M:Zenseless.Patterns.Serialization.ToBinStream(System.Object,System.IO.Stream)">
            <summary>
            Serializes the given class instance into the given stream.
            </summary>
            <param name="serializable">The class instance to be serialized.</param>
            <param name="output">Stream to serialize to</param>
        </member>
        <member name="T:Zenseless.Patterns.SolutionAttribute">
            <summary>
            Defines an attribute that is used by Zenseless to detect if SOLUTION is defined.
            Solution code is removed upon template generation
            </summary>
            <seealso cref="T:System.Attribute" />
        </member>
        <member name="T:Zenseless.Patterns.TypedHandle`1">
            <summary>
            A structure for strongly typed handles
            </summary>
            <typeparam name="TYPE">The type of the handle.</typeparam>
        </member>
        <member name="M:Zenseless.Patterns.TypedHandle`1.#ctor(System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:Zenseless.Patterns.TypedHandle`1"/> structure.
            </summary>
            <param name="id">The identifier.</param>
        </member>
        <member name="P:Zenseless.Patterns.TypedHandle`1.ID">
            <summary>
            Gets the identifier.
            </summary>
            <value>
            The identifier.
            </value>
        </member>
        <member name="P:Zenseless.Patterns.TypedHandle`1.IsNullHandle">
            <summary>
            Gets a value indicating whether this instance is the null handle.
            </summary>
            <value>
              <c>true</c> if this instance is the null handle; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="F:Zenseless.Patterns.TypedHandle`1.NullHandle">
            <summary>
            The null handle.
            </summary>
        </member>
        <member name="T:Zenseless.Patterns.TypeRegistry">
            <summary>
            Holds a dictionary of type instances that can be registered and requested.
            </summary>
        </member>
        <member name="M:Zenseless.Patterns.TypeRegistry.RegisterTypeInstance``1(``0)">
            <summary>
            Register an instance of a unique type with this type registry
            </summary>
            <typeparam name="TYPE">An unique type</typeparam>
            <param name="instance">An instance</param>
        </member>
        <member name="M:Zenseless.Patterns.TypeRegistry.GetInstance``1">
            <summary>
            Returns the registered instance of the given type.
            </summary>
            <typeparam name="TYPE">An unique type</typeparam>
            <returns>An instance of the given type</returns>
        </member>
    </members>
</doc>
